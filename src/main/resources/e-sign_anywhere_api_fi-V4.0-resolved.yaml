---
swagger: "2.0"
info:
  version: V4.0
  title: eSignAnywhere.Api
  x-swagger-net-version: 8.3.18.001
host: saas.esignanywhere.net
basePath: /Api
tags:
- name: Authorization
- name: Envelope
- name: Recipient
- name: SspFile
- name: Team
- name: User
- name: Version
schemes:
- https
paths:
  /v4.0/authorization:
    get:
      tags:
      - Authorization
      summary: Test if your user token and api token are valid.
      operationId: Authorization_Validate
      consumes: []
      produces:
      - application/json
      - text/json
      parameters: []
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      security:
      - organizationKey: []
      - userLoginName: []
  /v4.0/envelope/create:
    post:
      tags:
      - Envelope
      summary: Creates a draft with the given information.
      operationId: Envelope_Create
      consumes:
      - application/json
      - text/json
      produces:
      - application/json
      - text/json
      parameters:
      - in: body
        name: draftCreateModel
        description: Draft creation model.
        required: true
        schema:
          $ref: '#/definitions/DraftCreateModel'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CreateDraftResult'
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
      security:
      - organizationKey: []
      - userLoginName: []
  /v4.0/envelope/createFromTemplate:
    post:
      tags:
      - Envelope
      summary: Creates a draft from an existing template.
      operationId: Envelope_CreateFromTemplate
      consumes:
      - application/json
      - text/json
      produces:
      - application/json
      - text/json
      parameters:
      - in: body
        name: createFromTemplateModel
        required: true
        schema:
          $ref: '#/definitions/DraftCreateFromTemplateModel'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CreateDraftResult'
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
      security:
      - organizationKey: []
      - userLoginName: []
  /v4.0/envelope/{envelopeId}/cancel:
    get:
      tags:
      - Envelope
      summary: Cancel an envelope with the given envelope id.
      operationId: Envelope_Cancel
      consumes: []
      produces:
      - application/json
      - text/json
      parameters:
      - name: envelopeId
        in: path
        description: The id of the envelope/bulk.
        required: true
        type: string
      responses:
        "204":
          description: NoContent
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
        "404":
          description: NotFound
          schema:
            $ref: '#/definitions/Error'
      security:
      - organizationKey: []
      - userLoginName: []
  /v4.0/envelope/{envelopeId}:
    get:
      tags:
      - Envelope
      summary: Returns an envelope for the given id.
      operationId: Envelope_ById
      consumes: []
      produces:
      - application/json
      - text/json
      parameters:
      - name: envelopeId
        in: path
        description: The id of the envelope/bulk.
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/EnvelopeStatus'
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
        "404":
          description: NotFound
          schema:
            $ref: '#/definitions/Error'
      security:
      - organizationKey: []
      - userLoginName: []
    delete:
      tags:
      - Envelope
      summary: Delete an envelope with the given id.
      operationId: Envelope_Delete
      consumes: []
      produces:
      - application/json
      - text/json
      parameters:
      - name: envelopeId
        in: path
        description: The id of the envelope/bulk.
        required: true
        type: string
      responses:
        "204":
          description: NoContent
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
        "404":
          description: NotFound
          schema:
            $ref: '#/definitions/Error'
      security:
      - organizationKey: []
      - userLoginName: []
  /v4.0/envelope/find:
    post:
      tags:
      - Envelope
      summary: Returns the found envelopes for the given descriptor.
      operationId: Envelope_Find
      consumes:
      - application/json
      - text/json
      produces:
      - application/json
      - text/json
      parameters:
      - in: body
        name: descriptor
        description: The find descriptor.
        required: true
        schema:
          $ref: '#/definitions/FindEnvelopesDescriptor'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ExtendedFindEnvelopesResult'
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
      security:
      - organizationKey: []
      - userLoginName: []
  /v4.0/envelope/downloadCompletedDocument/{documentId}:
    get:
      tags:
      - Envelope
      summary: Returns a pdf document for the given id.
      operationId: Envelope_DownloadCompletedDocument
      consumes: []
      produces:
      - application/octet-stream
      - text/json
      - application/json
      parameters:
      - name: documentId
        in: path
        description: The id of the document you want to download.
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
        "404":
          description: NotFound
          schema:
            $ref: '#/definitions/Error'
      security:
      - organizationKey: []
      - userLoginName: []
  /v4.0/envelope/{envelopeId}/downloadPageImage/{docRefNumber}/{pageNumber}:
    get:
      tags:
      - Envelope
      summary: Returns a png image for the given page.
      operationId: Envelope_DownloadPageImage
      consumes: []
      produces:
      - application/octet-stream
      - text/json
      - application/json
      parameters:
      - name: envelopeId
        in: path
        description: The id for the envelope. NO Bulk id.
        required: true
        type: string
      - name: docRefNumber
        in: path
        description: The document number (starting with 1)
        required: true
        type: string
      - name: pageNumber
        in: path
        description: The page number (starting with 1)
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
        "404":
          description: NotFound
          schema:
            $ref: '#/definitions/Error'
      security:
      - organizationKey: []
      - userLoginName: []
  /v4.0/envelope/prepare:
    post:
      tags:
      - Envelope
      summary: Parses the provided files for markup fields and sig string and returns the containing elements.
      operationId: Envelope_Prepare
      consumes:
      - application/json
      - text/json
      produces:
      - application/json
      - text/json
      parameters:
      - in: body
        name: prepareModel
        required: true
        schema:
          $ref: '#/definitions/EnvelopePrepareModel'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/PrepareSendEnvelopeStepsResult'
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
      security:
      - organizationKey: []
      - userLoginName: []
  /v4.0/envelope/{envelopeId}/restart/{expirationInDays}:
    get:
      tags:
      - Envelope
      summary: Restarts the envelope with the given id and sets the expiration days.
      operationId: Envelope_Restart
      consumes: []
      produces:
      - application/json
      - text/json
      parameters:
      - name: envelopeId
        in: path
        description: The id of the envelope/bulk.
        required: true
        type: string
      - name: expirationInDays
        in: path
        description: The number of days until the restarted envelope expires again.
        required: true
        type: integer
        format: int32
      responses:
        "204":
          description: NoContent
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
        "404":
          description: NotFound
          schema:
            $ref: '#/definitions/Error'
      security:
      - organizationKey: []
      - userLoginName: []
  /v4.0/envelope/send:
    post:
      tags:
      - Envelope
      summary: Creates and directly sends a new envelope.
      operationId: Envelope_Send
      consumes:
      - application/json
      - text/json
      produces:
      - application/json
      - text/json
      parameters:
      - in: body
        name: sendModel
        required: true
        schema:
          $ref: '#/definitions/EnvelopeSendModel'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SendEnvelopeResult'
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
      security:
      - organizationKey: []
      - userLoginName: []
  /v4.0/envelope/sendFromTemplate:
    post:
      tags:
      - Envelope
      summary: Creates an envelope from a existing template and directly sends it.
      operationId: Envelope_SendFromTemplate
      consumes:
      - application/json
      - text/json
      produces:
      - application/json
      - text/json
      parameters:
      - in: body
        name: sendFromTemplateModel
        required: true
        schema:
          $ref: '#/definitions/EnvelopeSendFromTemplateModel'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SendEnvelopeResult'
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
      security:
      - organizationKey: []
      - userLoginName: []
  /v4.0/envelope/{envelopeId}/remind:
    get:
      tags:
      - Envelope
      summary: Sends a reminder email to the recipient which action is awaited for the provided envelope.
      operationId: Envelope_Remind
      consumes: []
      produces:
      - application/json
      - text/json
      parameters:
      - name: envelopeId
        in: path
        description: The id of the envelope/bulk.
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SendRemindersResult'
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
        "404":
          description: NotFound
          schema:
            $ref: '#/definitions/Error'
      security:
      - organizationKey: []
      - userLoginName: []
  /v4.0/envelope/{templateId}/copyFromTemplate:
    get:
      tags:
      - Envelope
      summary: Copy all the ids from the documents uploaded in the provided template.
      operationId: Envelope_CopyFromTemplate
      consumes: []
      produces:
      - application/json
      - text/json
      parameters:
      - name: templateId
        in: path
        description: The id of the template.
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CopyDocumentFromTemplateResult'
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
        "404":
          description: NotFound
          schema:
            $ref: '#/definitions/Error'
      security:
      - organizationKey: []
      - userLoginName: []
  /v4.0/recipient/{recipientId}/fromEnvelope/{envelopeId}:
    put:
      tags:
      - Recipient
      summary: Replaces a recipient in an envelope.
      operationId: Recipient_Replace
      consumes:
      - application/json
      - text/json
      produces:
      - application/json
      - text/json
      parameters:
      - name: envelopeId
        in: path
        description: The id of the envelope/bulk.
        required: true
        type: string
      - name: recipientId
        in: path
        description: The id of an recipient in the bulk or envelope.
        required: true
        type: string
      - in: body
        name: recipient
        description: The new recipient data.
        required: true
        schema:
          $ref: '#/definitions/ReplaceRecipientData'
      responses:
        "204":
          description: NoContent
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
        "404":
          description: NotFound
          schema:
            $ref: '#/definitions/Error'
      security:
      - organizationKey: []
      - userLoginName: []
    delete:
      tags:
      - Recipient
      summary: Deletes a recipient from an envelope.
      operationId: Recipient_DeleteRecipient
      consumes: []
      produces:
      - application/json
      - text/json
      parameters:
      - name: envelopeId
        in: path
        description: The id of the envelope/bulk.
        required: true
        type: string
      - name: recipientId
        in: path
        description: The id of an recipient in the bulk or envelope.
        required: true
        type: string
      responses:
        "204":
          description: NoContent
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
        "404":
          description: NotFound
          schema:
            $ref: '#/definitions/Error'
      security:
      - organizationKey: []
      - userLoginName: []
  /v4.0/sspfile/disposefile/{sspFileId}:
    delete:
      tags:
      - SspFile
      summary: Diposes a file which was uploaded beforehand.
      operationId: SspFile_DisposeFile
      consumes: []
      produces:
      - application/json
      - text/json
      parameters:
      - name: sspFileId
        in: path
        description: The id for the uploaded file.
        required: true
        type: string
      responses:
        "204":
          description: NoContent
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
        "404":
          description: NotFound
          schema:
            $ref: '#/definitions/Error'
      security:
      - organizationKey: []
      - userLoginName: []
  /v4.0/sspfile/uploadtemporary:
    post:
      tags:
      - SspFile
      summary: "Uploads a file for further processing/using.\r\nContent-Type must be multipart/form-data!"
      operationId: SspFile_UploadTemporary
      consumes:
      - multipart/form-data
      produces:
      - application/json
      - text/json
      parameters:
      - name: File
        in: formData
        description: Upload software package
        required: true
        type: file
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UploadSspFileResult'
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
        "415":
          description: UnsupportedMediaType
          schema:
            $ref: '#/definitions/Error'
      security:
      - organizationKey: []
      - userLoginName: []
  /v4.0/team:
    get:
      tags:
      - Team
      summary: Returns the teams set for the organization of the api user.
      operationId: Team_Get
      consumes: []
      produces:
      - application/json
      - text/json
      parameters: []
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Teams'
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
      security:
      - organizationKey: []
      - userLoginName: []
    post:
      tags:
      - Team
      summary: Replaces all teams with the provided teams.
      operationId: Team_Set
      consumes:
      - application/json
      - text/json
      produces:
      - application/json
      - text/json
      parameters:
      - in: body
        name: teams
        description: A list of Teams. If empty, all teams get deleted.
        required: true
        schema:
          $ref: '#/definitions/Teams'
      responses:
        "204":
          description: NoContent
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
      security:
      - organizationKey: []
      - userLoginName: []
  /v4.0/user/create:
    post:
      tags:
      - User
      summary: Creates an user in the organization of the api user.
      operationId: User_Create
      consumes:
      - application/json
      - text/json
      produces:
      - application/json
      - text/json
      parameters:
      - in: body
        name: model
        required: true
        schema:
          $ref: '#/definitions/UserCreateModel'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CreateUserResult'
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
      security:
      - organizationKey: []
      - userLoginName: []
  /v4.0/user/{userId}:
    delete:
      tags:
      - User
      summary: Deletes an user from the api user's organization.
      operationId: User_Delete
      consumes:
      - application/json
      - text/json
      produces:
      - application/json
      - text/json
      parameters:
      - name: userId
        in: path
        description: The id of the user who should be deleted.
        required: true
        type: string
      - in: body
        name: reassignDescriptor
        description: Information about the user and remaining envelopes handling.
        required: true
        schema:
          $ref: '#/definitions/DeleteUserReassignDescriptor'
      responses:
        "204":
          description: NoContent
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
        "404":
          description: NotFound
          schema:
            $ref: '#/definitions/Error'
      security:
      - organizationKey: []
      - userLoginName: []
    patch:
      tags:
      - User
      summary: Updates settings of a particular user.
      operationId: User_Update
      consumes:
      - application/json
      - text/json
      produces:
      - application/json
      - text/json
      parameters:
      - name: userId
        in: path
        description: The id of the user who should be updated.
        required: true
        type: string
      - in: body
        name: userUpdateDescription
        description: Information about the user to be updated
        required: true
        schema:
          $ref: '#/definitions/UserUpdateDescription'
      responses:
        "204":
          description: NoContent
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
        "404":
          description: NotFound
          schema:
            $ref: '#/definitions/Error'
      security:
      - organizationKey: []
      - userLoginName: []
  /v4.0/user/find:
    post:
      tags:
      - User
      summary: Finds users corresponding to the given user descriptor.
      operationId: User_Find_v2
      consumes:
      - application/json
      - text/json
      produces:
      - application/json
      - text/json
      parameters:
      - in: body
        name: findUsersDescriptor
        description: The descriptor for finding users (filter).
        required: true
        schema:
          $ref: '#/definitions/FindUsersDescriptor'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ExtendedFindUsersResult'
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
      security:
      - organizationKey: []
      - userLoginName: []
  /v4.0/user/{userId}/uploadSignatureImage:
    post:
      tags:
      - User
      summary: Replaces the signature image.
      operationId: User_UploadSignatureImage
      consumes:
      - multipart/form-data
      produces:
      - application/json
      - text/json
      parameters:
      - name: userId
        in: path
        description: The id of the user whos signature image should be replaced.
        required: true
        type: string
      - name: File
        in: formData
        description: Upload software package
        required: true
        type: file
      responses:
        "204":
          description: NoContent
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
        "404":
          description: NotFound
          schema:
            $ref: '#/definitions/Error'
        "415":
          description: UnsupportedMediaType
          schema:
            $ref: '#/definitions/Error'
      security:
      - organizationKey: []
      - userLoginName: []
  /v4.0/user/{email}:
    get:
      tags:
      - User
      summary: Get user by email.
      operationId: User_GetUserByEmail
      consumes: []
      produces:
      - application/json
      - text/json
      parameters:
      - name: email
        in: path
        description: Email to find user.
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ExtendedFindUsersResultEntry'
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
        "404":
          description: NotFound
      security:
      - organizationKey: []
      - userLoginName: []
  /v4.0/version:
    get:
      tags:
      - Version
      summary: Returns the version of eSignAnyWhere.
      operationId: Version_Get
      consumes: []
      produces:
      - application/json
      - text/json
      parameters: []
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/FlowApiResult'
securityDefinitions:
  organizationKey:
    description: API Key Authentication
    type: apiKey
    name: organizationKey
    in: header
  userLoginName:
    description: User Login Authentication
    type: apiKey
    name: userLoginName
    in: header
definitions:
  DraftCreateModel:
    type: object
    properties:
      SspFileIds:
        type: array
        items:
          type: string
      SendEnvelopeDescription:
        $ref: '#/definitions/SendEnvelopeDescription'
      CreateDraftOptions:
        $ref: '#/definitions/CreateDraftOptions'
    xml:
      name: DraftCreateModel
  SendEnvelopeDescription:
    type: object
    properties:
      Name:
        type: string
        description: The name of the envelope.
      EmailSubject:
        type: string
        description: The subject of the sent out emails.
      EmailBody:
        type: string
        description: The body of the sent out emails.
      DisplayedEmailSender:
        type: string
        description: The name of the email sender.
      EnableReminders:
        type: boolean
        description: If true, reminders are used.
      FirstReminderDayAmount:
        type: integer
        format: int32
        description: Amount of days until the first reminder is sent out.
      RecurrentReminderDayAmount:
        type: integer
        format: int32
        description: Amount of days until all recurrent reminders are sent out.
      BeforeExpirationDayAmount:
        type: integer
        format: int32
        description: Amount of days until a reminder about the expiration is sent out.
      DaysUntilExpire:
        type: integer
        format: int32
        description: Amount of days until the envelope expires.
      CallbackUrl:
        type: string
        description: The callback url of the envelope.
      StatusUpdateCallbackUrl:
        type: string
        description: The callback url of status changes for the envelope.
      WorkstepEventCallback:
        description: Workstep event callback options.
        $ref: '#/definitions/WorkstepEventCallback'
      Steps:
        type: array
        xml:
          name: SendEnvelopeStep
          wrapped: true
        description: The steps for the envelope.
        items:
          $ref: '#/definitions/SendEnvelopeStep'
      AddFormFields:
        description: Added form fields.
        $ref: '#/definitions/AddFormFields'
      OverrideFormFieldValues:
        description: Form field descriptions which should be filled.
        $ref: '#/definitions/OverrideFormFieldOptions'
      MetaDataXml:
        type: string
      AttachSignedDocumentsToEnvelopeLog:
        type: boolean
        description: If true, the signed document(s) will be added to the envelope log as attachment.
        default: false
    xml:
      name: SendEnvelopeDescription
  CreateDraftOptions:
    type: object
    properties:
      AfterSendRedirectUrl:
        type: string
        description: The redirection URL after sending the envelope.
      AfterSendCallbackUrl:
        type: string
        description: The URL where a callbackl is sent to after sending the envelope.
      RedirectPolicy:
        type: string
        description: Specifies where to redirect if <code>AllowAgentRedirect</code> is <code>true</code>.
        enum:
        - None
        - ToRecipients
        - ToDesigner
        - ToSend
        x-ms-enum:
          name: RedirectPolicyEnum
          modelAsString: false
      AllowAgentRedirect:
        type: boolean
        description: Specifies if the agentmode is active.
      IframeWhiteList:
        type: string
        description: "A string indicating a white list of urls where the designer is allowed to be used in agent mode.\r\nExample: \"http://172.16.17.181;http://foo.org\""
    xml:
      name: CreateDraftOptions
    description: Options for the draft creation.
  WorkstepEventCallback:
    type: object
    properties:
      Url:
        type: string
        description: The callback URL.
      Blacklist:
        type: array
        description: "A list off callback types which are NOT sent.\r\nAn empty lists means are callback types should fire a callback.\r\nYou can either have a black OR white list."
        items:
          type: string
      WhiteList:
        type: array
        description: "A list of callbacks which should be sent.\r\nAn empty lists means are callback types should fire a callback.\r\nYou can either have a black OR white list."
        items:
          type: string
    xml:
      name: WorkstepEventCallback
    description: Defines callbacks which are sent out from the WSC (WorkStepController).
  SendEnvelopeStep:
    type: object
    properties:
      OrderIndex:
        type: integer
        format: int32
        description: The order index of the step.
      Recipients:
        type: array
        xml:
          name: SendEnvelopeRecipient
          wrapped: true
        description: "A list of recipients for this step (usally 1, multiple for bulk).\r\nNot necessary in case of <code>RecipientType</code> Automatic"
        items:
          $ref: '#/definitions/SendEnvelopeRecipient'
      EmailBodyExtra:
        type: string
        description: The additional email body for the step.
      RecipientType:
        type: string
        description: The recipient type of the step.
        default: "Signer"
        enum:
        - Signer
        - Cc
        - Acknowledge
        - Pkcs7Signer
        - Automatic
        x-ms-enum:
          name: RecipientTypeEnum
          modelAsString: false
      WorkstepConfiguration:
        description: "The configuration for the step.\r\nOnly necessary for <code>RecipientType</code> Signer and Pkcs7Signer."
        $ref: '#/definitions/WorkstepConfiguration'
      DocumentOptions:
        type: array
        xml:
          name: SendEnvelopeDocumentOption
          wrapped: true
        description: The document options for the step.
        items:
          $ref: '#/definitions/SendEnvelopeDocumentOption'
      UseDefaultAgreements:
        type: boolean
        description: Use default Agreements from SignatureDisclosure settings
    xml:
      name: SendEnvelopeStep
    description: A step in an envelope representing recipients.
  AddFormFields:
    type: object
    properties:
      Forms:
        type: object
        description: A dictionary consisting of doc reference numbers and form field descriptions.
        additionalProperties:
          type: array
          xml:
            name: AddFormFieldDescriptor
            wrapped: true
          items:
            $ref: '#/definitions/AddFormFieldDescriptor'
    xml:
      name: AddFormFields
    description: Contains a list of form fields which should be added to the document.
  OverrideFormFieldOptions:
    type: object
    properties:
      Forms:
        type: object
        description: A dictionary consisting of document reference number and descriptions of form fields whos value should be filled.
        additionalProperties:
          type: array
          xml:
            name: FillFormDescriptor
            wrapped: true
          items:
            $ref: '#/definitions/FillFormDescriptor'
    xml:
      name: OverrideFormFieldOptions
    description: ""
  SendEnvelopeRecipient:
    type: object
    properties:
      Email:
        type: string
        description: The email address of the recipient.
      FirstName:
        type: string
        description: The first name of the recipient.
      LastName:
        type: string
        description: The last name of the recipient.
      LanguageCode:
        type: string
        description: The language code of the recipient.
      EmailBodyExtra:
        type: string
        description: Additional email body for the recipient.
      DisableEmail:
        type: boolean
        description: Specifies if an email should be sent out for this recipient.
        default: false
      AddAndroidAppLink:
        type: boolean
        description: If true, an Android app link is added to the email message.
        default: false
      AddIosAppLink:
        type: boolean
        description: If true, an iOS app link is added to the email message.
        default: false
      AddWindowsAppLink:
        type: boolean
        description: If true, an Windows app link is added to the email message.
        default: false
      AllowDelegation:
        type: boolean
        description: If true, delegation is allowed for this recipient.
      SkipExternalDataValidation:
        type: boolean
        description: If true, external validation for this recipient is skipped.
        default: false
      AuthenticationMethods:
        type: array
        xml:
          name: SendEnvelopeAuthentication
          wrapped: true
        description: A list of authentications which are available for the recipient.
        items:
          $ref: '#/definitions/SendEnvelopeAuthentication'
      DisposableCertificateData:
        description: The disposable certificate data for the recipient.
        $ref: '#/definitions/DisposableCertificateData'
      SwissComCertificateData:
        description: The swisscom disposable certificate data for the recipient.
        $ref: '#/definitions/SwissComCertificateData'
      RemoteCertificateData:
        description: The remote certificate data for the recipient.
        $ref: '#/definitions/RemoteCertificateData'
      OtpData:
        description: The one time pad data for the recipient.
        $ref: '#/definitions/OtpData'
      Pkcs7SignerData:
        description: The PKCS7 data for the recipient.
        $ref: '#/definitions/Pkcs7SignerData'
    xml:
      name: SendEnvelopeRecipient
    description: Description of a recipient.
  WorkstepConfiguration:
    type: object
    properties:
      WorkstepLabel:
        type: string
        description: A label for this workstep.
      SmallTextZoomFactorPercent:
        type: integer
        format: int32
        description: Defines a image generation correction factor. If for example this document contains very small text, which might not be readable with the standard image resolution of the client, this factor can be used to tell the client to get a higher resolution.
        default: 100
      FinishAction:
        description: Configure the actions done by the server and the by the clients when the workstep is finished.
        $ref: '#/definitions/FinishAction'
      IntroTexts:
        description: Intro texts.
        $ref: '#/definitions/IntroTexts'
      ReceiverInformation:
        description: Information about the recipient of the document.
        readOnly: true
        $ref: '#/definitions/ReceiverInformation'
      SenderInformation:
        description: Information about the sender of the document.
        readOnly: true
        $ref: '#/definitions/SenderInformation'
      TransactionCodeConfigurations:
        type: array
        xml:
          name: TransactionCodeConfiguration
          wrapped: true
        description: Collection of TransactionCodeConfigurations
        items:
          $ref: '#/definitions/TransactionCodeConfiguration'
      SignatureConfigurations:
        type: array
        xml:
          name: SignatureConfiguration
          wrapped: true
        description: Collection of SignatureConfigurations
        items:
          $ref: '#/definitions/SignatureConfiguration'
      ViewerPreferences:
        description: The Viewer Preferences can be used to adapt the appearance and the behavior of the SignAnyWhere Viewer.
        $ref: '#/definitions/ViewerPreferences'
      ResourceUris:
        description: Rescource uris.
        readOnly: true
        $ref: '#/definitions/ResourceUris'
      AuthenticationMethods:
        description: Authentication methods.
        readOnly: true
        $ref: '#/definitions/AuthenticationMethods'
      AdditionalClientWorkstepInformation:
        type: string
        description: Additional client workstep information.
        readOnly: true
      AuditingToolsConfiguration:
        description: Configuration regarding tools for auditing.
        readOnly: true
        $ref: '#/definitions/AuditingToolsConfiguration'
      Policy:
        description: Workstep policies.
        $ref: '#/definitions/Policy'
    xml:
      name: WorkstepConfiguration
    description: The workstep configuration used to create the workstep.
  SendEnvelopeDocumentOption:
    type: object
    properties:
      DocumentReference:
        type: string
        description: The document reference number (starting with 1).
      IsHidden:
        type: boolean
        description: Specifies if the referenced document is hidden.
    xml:
      name: SendEnvelopeDocumentOption
    description: Options for a specific document.
  AddFormFieldDescriptor:
    type: object
    required:
    - DiscriminatorType
    discriminator: DiscriminatorType
    properties:
      Name:
        type: string
        description: The name of the form field.
      ReadOnly:
        type: boolean
        description: Specifies if the form field is readonly.
        default: false
      Required:
        type: boolean
        description: Specifies if the form field is required.
        default: false
      X:
        type: number
        format: double
        description: The X coordinate in points.
      Y:
        type: number
        format: double
        description: The Y coordinate in points.
      Width:
        type: number
        format: double
        description: The width of the form field in points.
      Height:
        type: number
        format: double
        description: The height of the form field in points.
      Page:
        type: integer
        format: int32
        description: The page number of the form field. (Starting with 1)
      DiscriminatorType:
        type: string
        description: To differentiate between childs.
    xml:
      name: AddFormFieldDescriptor
    description: "Abstract class, use the derived classes:\r\n- AddCheckBoxFormFieldDescriptor\r\n- AddComboBoxFormFieldDescriptor\r\n- AddRadioButtonFormFieldDescriptor\r\n- AddTextBoxFormFieldDescriptor\r\n- AddListBoxFormFieldDescriptor\r\n            \r\nFor usage see sample code.\r\n\r\nDescribes a form field and its options."
  FillFormDescriptor:
    type: object
    required:
    - DiscriminatorType
    discriminator: DiscriminatorType
    properties:
      Name:
        type: string
        description: "Abstract class, use the derived classes:\r\n- FillCheckBoxFormDescriptor\r\n- FillComboBoxFormDescriptor\r\n- FillListBoxFormDescriptor\r\n- FillRadioButtonFormDescriptor\r\n- FillTextBoxFormDescriptor\r\n            \r\nFor usage see sample code.\r\n\r\nThe name of the form field."
      DiscriminatorType:
        type: string
        description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    xml:
      name: FillFormDescriptor
    description: The description of the form field which should be filled.
  SendEnvelopeAuthentication:
    type: object
    properties:
      Method:
        type: string
        description: The authentication method.
        enum:
        - Pin
        - Sms
        - WindowsLive
        - CustomOAuthProvider
        - CustomSamlProvider
        - BankId
        x-ms-enum:
          name: AuthentificationMethodEnum
          modelAsString: false
      Parameter:
        type: string
        description: The needed parameters for the authentication.
      Filters:
        type: array
        xml:
          name: SendEnvelopeAuthenticationFilter
          wrapped: true
        description: The filters for the authentication (OAUTH and SAML only).
        items:
          $ref: '#/definitions/SendEnvelopeAuthenticationFilter'
    xml:
      name: SendEnvelopeAuthentication
    description: Authentication for a recipient.
  DisposableCertificateData:
    type: object
    properties:
      CountryResidence:
        type: string
      IdentificationCountry:
        type: string
      IdentificationType:
        type: string
        default: "FOREIGN_TAX_CODE"
        enum:
        - NONE
        - FOREIGN_TAX_CODE
        - PERSONAL_NUMBER
        - PASSPORT
        - NATIONAL_IDENTITY_CARD
        - ITALIAN_TAX_CODE
        - NO_SERIAL_NUMBER
        x-ms-enum:
          name: DisposableCertificateIdentificationTypeEnum
          modelAsString: false
      PhoneMobile:
        type: string
      DocumentType:
        type: string
        enum:
        - CI
        - PA
        - PASS
        - PD
        - ID
        - PN
        - AT
        x-ms-enum:
          name: DisposableCertificateDocumentTypeEnum
          modelAsString: false
      DocumentIssuedBy:
        type: string
      DocumentIssuedOn:
        type: string
        format: date-time
      DocumentExpiryDate:
        type: string
        format: date-time
      SerialNumber:
        type: string
      DocumentNumber:
        type: string
    xml:
      name: DisposableCertificateData
  SwissComCertificateData:
    type: object
    properties:
      PhoneNumber:
        type: string
      MobileId:
        type: string
      Parameters:
        type: array
        xml:
          name: KeyValuePair
          wrapped: true
        items:
          $ref: '#/definitions/KeyValuePair'
    xml:
      name: SwissComCertificateData
  RemoteCertificateData:
    type: object
    properties:
      UserId:
        type: string
      DeviceId:
        type: string
    xml:
      name: RemoteCertificateData
  OtpData:
    type: object
    properties:
      PhoneMobile:
        type: string
    xml:
      name: OtpData
  Pkcs7SignerData:
    type: object
    properties:
      AllowedPkcs7SignatureTypes:
        type: array
        xml:
          name: Pkcs7SignatureType
          wrapped: true
        items:
          type: string
          enum:
          - LocalCertificate
          - RemoteCertificate
          - RemoteDisposableCertificate
          x-ms-enum:
            name: Pkcs7SignatureType
            modelAsString: false
    xml:
      name: Pkcs7SignerData
  FinishAction:
    type: object
    properties:
      ServerActions:
        type: array
        xml:
          name: ServerAction
          wrapped: true
        description: Configure the actions done by the server when the workstep is finished.
        readOnly: true
        items:
          $ref: '#/definitions/ServerAction'
      ClientActions:
        type: array
        xml:
          name: ClientAction
          wrapped: true
        description: Client actions can specify the behavior of a specific client after a workstep is finished.
        items:
          $ref: '#/definitions/ClientAction'
    xml:
      name: FinishAction
    description: Configure the actions done by the server and the by the clients when the workstep is finished.
  IntroTexts:
    type: object
    properties:
      Texts:
        type: array
        xml:
          name: Text
          wrapped: true
        description: Collection of texts.
        items:
          $ref: '#/definitions/Text'
    xml:
      name: IntroTexts
    description: IntroText to be shown.
  ReceiverInformation:
    type: object
    properties:
      UserInformation:
        description: Information about the user.
        $ref: '#/definitions/UserInformation'
      HolderInformation:
        type: string
        description: Information about the holder.
      DisposableCertificateDisclaimerTexts:
        description: Disposable certificate disclaimer texts.
        $ref: '#/definitions/DisposableCertificateDisclaimerTexts'
    xml:
      name: ReceiverInformation
    description: Information about the recipient of the document.
  SenderInformation:
    type: object
    properties:
      UserInformation:
        description: Information about the user.
        $ref: '#/definitions/UserInformation'
    xml:
      name: SenderInformation
    description: Information about the sender.
  TransactionCodeConfiguration:
    type: object
    properties:
      Id:
        type: string
        description: Id of the transaction code.
      HashAlgorithmIdentifier:
        type: string
        description: HashAlgorithm identifier to be used.
        enum:
        - Sha1
        - Sha256
        - Sha512
        x-ms-enum:
          name: HashAlgorithms
          modelAsString: false
      Texts:
        type: array
        xml:
          name: Text
          wrapped: true
        description: Collection of all texts.
        items:
          $ref: '#/definitions/Text'
    xml:
      name: TransactionCodeConfiguration
    description: TransactionCode configurations.
  SignatureConfiguration:
    type: object
    properties:
      SpcId:
        type: string
        description: Signature plugin configuration id.
      PdfSignatureProperties:
        description: Configurate the signature properties.
        $ref: '#/definitions/PdfSignatureProperties'
      PdfSignatureCryptographicData:
        description: Configurate the cryptographic data.
        $ref: '#/definitions/PdfSignatureCryptographicData'
      CertificateFilter:
        description: Signatureplugin certificate filter configuration.
        $ref: '#/definitions/CertificateFilter'
    xml:
      name: SignatureConfiguration
    description: Configurate the signatures for this workstep. One default configuration has to be defined. The default configuration is used for flatten signatures, adhoc signatures and signature fields which do not reference a special signature plugin configuration. The default configuration does not contain the attribute 'spcId'. If the attribute 'spcId' is defined the signature plugin configuration does only apply to signature fields referencing the configuration by specifiying <param name="spcId">id</param>
  ViewerPreferences:
    type: object
    properties:
      ShowPageNavigationBar:
        type: boolean
        description: Allows to disable the page navigation bar on the right side of the viewer.
      ShowThumbnails:
        type: boolean
        description: If enabled, the thumbnail display will be visible, otherwise false.
      SkipFinishConfirmDialog:
        type: boolean
        description: If enabled, finish action will be executed immediately without confirm dialog.
      SkipDocumentDialog:
        type: boolean
        description: If enabled, the download document dialog after finishing the workstep will be skipped.
      ShowImagesInFullWidth:
        type: boolean
        description: If enabled, available width will be used for images which might stretch them.
      DisableGeolocation:
        type: boolean
        description: If enabled, Geolocation won't be used for webservice calls.
      ShowDocumentDownloadDialogAfterAutomaticFinish:
        type: boolean
        description: If enabled, the "Download documents dialog" after automatically finishing the workstep will be shown (e.g. acknowledge receipt scenario).
      AttachmentsMaxFileSize:
        type: integer
        format: int32
        description: Allows to configure the maximum file size for attachments in kBytes.
      SkipPreviewImageOnDisposableCertificate:
        type: boolean
        description: Allows to disable the preview image of the signature when using the Namirial Disposable certificate functionality.
      LoadCustomJs:
        type: boolean
        description: If enabled, a Custom.js file will be loaded when the page is opened allowing to configure customized data.
      AllowCustomButtons:
        type: boolean
        description: If enabled, custom buttons can be added via xyzmo.Customization plugin.
      GuidingBehavior:
        type: string
        description: Defines how the viewer should guide through the tasks.
        enum:
        - GuideOnlyRequiredTasks
        - GuideRequiredAndOptionalTasks
        - GuideDisabled
        x-ms-enum:
          name: GuidingBehaviorType
          modelAsString: false
      FormFieldsGuidingBehavior:
        type: string
        description: Defining how the viewer should guide through form fields.
        enum:
        - AllowSubmitAlways
        - AllowSubmitOnlyAfterAllRequiredFieldsAreDone
        x-ms-enum:
          name: FormFieldsGuidingBehaviorType
          modelAsString: false
      ShowVersionNumber:
        type: boolean
        description: Defining if the viewer should show the version number.
      EnableWarningPopupOnLeave:
        type: boolean
        description: Defining if the viewer should display a warning popup when the user leaves the page.
      WarningPopupDisplayAfter:
        type: string
        description: Defining when the warning popup should be displayed.
        enum:
        - FillOrSignField
        - Authentication
        - Always
        - Agreement
        x-ms-enum:
          name: WarningPopupDisplayAfterType
          modelAsString: false
      FinishWorkstepOnOpen:
        type: boolean
        description: If set to 1 the workstep is automatically finished when opened in the viewer, if finishing is possible.
      AutoFinishAfterRequiredTasksDone:
        type: boolean
        description: If enabled, finish action will be automatically triggered after last required task is done.
      GuidingBehaviorOnFinishedTask:
        type: string
        description: Defines the guiding behavior after a task has been completed (e.g. signature field has been signed). This flag is not taken into account if the guiding is disabled.
        enum:
        - NoMove
        - MoveToNext
        - MoveToNextAndActivate
        x-ms-enum:
          name: GuidingBehaviorOnFinishedTaskType
          modelAsString: false
      SkipThankYouDialog:
        type: boolean
        description: If enabled, the 'thank you dialog' which is shown after all required tasks have been done, will be skipped.
      NativeAppsUrlScheme:
        type: string
        description: Defines the url scheme for the native SAW Viewer applications (needed for customized SAW Viewer apps).
      DocumentViewingMode:
        type: string
        description: Defines whether the envelope is displayed in its entirety or if only a specific document is shown at a time.
        enum:
        - EndlessPaperAllDocuments
        - EndlessPaperPerDocument
        x-ms-enum:
          name: DocumentViewingModeType
          modelAsString: false
      ThumbnailMode:
        type: string
        description: 'Defines the appearance of the thumbnail view: all pages of the entire document are shown, or only the first page of each document within an envelope.'
        enum:
        - ShowAllPages
        - ShowFirstPageOnly
        x-ms-enum:
          name: ThumbnailModeType
          modelAsString: false
      ShowTopBar:
        type: boolean
        description: Defines if the top bar should be visible or not. If disabled, also the 'GuidingBehavior' and the 'DisplayRejectButtonInTopBar' will be deactivated.
      DisplayRejectButtonInTopBar:
        type: boolean
        description: If enabled, the 'reject' button will be displayed in the left bar below the 'finish' button as well
      MultipleSignatureTypesAndBatchSigningSettings:
        description: MultipleSignatureTypesAndBatchSigning settings.
        $ref: '#/definitions/MultipleSignatureTypesAndBatchSigningSettings'
      VisibleAreaOptions:
        description: Options for Post Messaging in Iframes.
        $ref: '#/definitions/VisibleAreaOptions'
    xml:
      name: ViewerPreferences
    description: The Viewer Preferences can be used to adapt the appearance and the behavior of the SignAnyWhere Viewer.
  ResourceUris:
    type: object
    properties:
      DelegationUri:
        type: string
        description: Uri which will be used to retreive form data for a client.
      SignatureImagesUri:
        type: string
        description: Urif of the signature images.
    xml:
      name: ResourceUris
    description: Rescource uris.
  AuthenticationMethods:
    type: object
    properties:
      AuthenticationMethodList:
        type: array
        xml:
          name: AuthenticationMethod
          wrapped: true
        description: Lists all configured authentication methods that can be used for this workstep.
        items:
          $ref: '#/definitions/AuthenticationMethod'
    xml:
      name: AuthenticationMethods
    description: Authentication methods.
  AuditingToolsConfiguration:
    type: object
    properties:
      WriteAuditTrail:
        type: boolean
        description: Defines if an audit trail file should be written.
      IdStampConfiguration:
        description: Defines the configuration how and where on the documents the workstepId should be stamped.
        $ref: '#/definitions/WorkstepIdStampConfiguration'
      NotificationConfiguration:
        description: Configures the service notificiations where being sent to.
        $ref: '#/definitions/NotificationConfiguration'
    xml:
      name: AuditingToolsConfiguration
    description: Configuration regarding tools for auditing.
  Policy:
    type: object
    properties:
      GeneralPolicies:
        description: Defines general policies for this workstep.
        $ref: '#/definitions/GeneralPolicies'
      WorkstepTasks:
        description: Configuration of tasks.
        $ref: '#/definitions/WorkstepTasks'
      FinalizeActions:
        description: Allows to define actions which will be executed when the workstep will be finished. Those actions are performed before the ServerAction will be called and, depending on the type of the action, it might change the documents according to the workstep!
        $ref: '#/definitions/FinalizeActions'
    xml:
      name: Policy
    description: Workstep policies.
  SendEnvelopeAuthenticationFilter:
    type: object
    properties:
      CompareOperation:
        type: string
        description: The compare method of the filter.
        enum:
        - Equals
        x-ms-enum:
          name: AuthenticationFilterCompareOperation
          modelAsString: false
      FilterId:
        type: string
        description: The filter id of the authentication.
      FilterValue:
        type: string
        description: The filter value of the authentication.
    xml:
      name: SendEnvelopeAuthenticationFilter
    description: The authentication filter.
  KeyValuePair:
    type: object
    properties:
      Key:
        type: string
        description: Key.
      Value:
        type: string
        description: Value.
    xml:
      name: KeyValuePair
    description: KeyValuePair
  ServerAction:
    type: object
    properties:
      CallSynchronous:
        type: boolean
        description: Wether the server should call that action before returning to the client which called FinishWorkstep.
        default: true
      Action:
        type: string
        description: Url of the server side action.
    xml:
      name: ServerAction
    description: Defines a server action.
  ClientAction:
    type: object
    properties:
      RemoveDocumentFromRecentDocumentList:
        type: boolean
        description: Removes the document from recent document list.
      CallClientActionOnlyAfterSuccessfulSync:
        type: boolean
        description: Call client action only after successful sync.
        default: true
      ClientName:
        type: string
        description: Name for the client.
      CloseApp:
        type: boolean
        description: Defines if the app should be closed.
      Action:
        type: string
        description: Url of the action.
    xml:
      name: ClientAction
    description: Defines a client action.
  Text:
    type: object
    properties:
      Language:
        type: string
        description: Language of this text.
      Value:
        type: string
        description: Text of this element.
    xml:
      name: Text
    description: Text element.
  UserInformation:
    type: object
    properties:
      FirstName:
        type: string
      LastName:
        type: string
      EMail:
        type: string
    xml:
      name: UserInformation
  DisposableCertificateDisclaimerTexts:
    type: object
    properties:
      Texts:
        type: array
        xml:
          name: Text
          wrapped: true
        description: List of texts.
        items:
          $ref: '#/definitions/Text'
    xml:
      name: DisposableCertificateDisclaimerTexts
  PdfSignatureProperties:
    type: object
    properties:
      PdfAConformant:
        type: boolean
        description: Define usage of PdfAConformant.
      PAdESPart4Compliant:
        type: boolean
        description: Define usage of PAdESPart4Compliant.
      IncludeSigningCertificateChain:
        type: boolean
        description: Define if SigningCertificateChain should be included.
      SigningCertificateRevocationInformationIncludeMode:
        type: string
        description: Define the SigningCertificateRevocationInformationIncludeMode type.
        enum:
        - DoNotInclude
        - Include
        - TryToInclude
        - CheckRevocationIncludeOcsp
        - IncludeDss
        - TryToIncludeDss
        x-ms-enum:
          name: SigningCertificateRevocationInformationIncludeModeType
          modelAsString: false
      SignatureTimestampData:
        description: Configure SignatureTimestampData for this object.
        $ref: '#/definitions/SignatureTimestampData'
    xml:
      name: PdfSignatureProperties
    description: Configure PdfSignatureProperties.
  PdfSignatureCryptographicData:
    type: object
    properties:
      SignatureHashAlgorithm:
        type: string
        description: Define the HashAlgorithm for the signature.
        enum:
        - Sha1
        - Sha256
        - Sha512
        x-ms-enum:
          name: HashAlgorithms
          modelAsString: false
      SigningCertificateDescriptor:
        description: Configure a SigningCertificateDescriptor for this object.
        $ref: '#/definitions/SigningCertificateDescriptor'
    xml:
      name: PdfSignatureCryptographicData
    description: Configure a PdfSignatureCryptographicData.
  CertificateFilter:
    type: object
    properties:
      KeyUsages:
        type: array
        description: KeyUsages.
        items:
          type: string
      ThumbPrints:
        type: array
        description: ThumbPrints.
        items:
          type: string
      RootThumbPrints:
        type: array
        description: RootThumbPrints.
        items:
          type: string
    xml:
      name: CertificateFilter
    description: Signatureplugin certificate filter configuration.
  MultipleSignatureTypesAndBatchSigningSettings:
    type: object
    properties:
      IsUseBatchSigningCheckedByDefault:
        type: boolean
        description: If enabled, the "Use batch signing" checkbox inside the dialog when signing a signature field is checked by default.
      IsRememberSignatureTypeCheckedByDefault:
        type: boolean
        description: If enabled, the "Remember signature type" checkbox inside the dialog when signing a signature field is checked by default.
      IsRememberBatchSigningDecisionCheckedByDefault:
        type: boolean
        description: If enabled, the "remember batch signing decision" checkbox inside the dialog when signing a signature field is checked by default.
      SkipMultipleSignatureTypesAndBatchSigningDialogIfBatchSigningPossible:
        type: boolean
        description: If enabled, and the IsUseBatchSigningCheckedByDefault is also enabled, the dialog to confirm the batch signing (and optionally choosing the signature type) will be skipped if either the signature type to use has been remembered earlier or a preferred type is set.
    xml:
      name: MultipleSignatureTypesAndBatchSigningSettings
    description: Configure settings for multiple signature types and batch signing.
  VisibleAreaOptions:
    type: object
    properties:
      AllowedDomain:
        type: string
        description: "Allowed domains for post messaging.\r\nE.g. \"esignanywhere.com\""
      Enabled:
        type: boolean
        description: "Defines if post messaging should be enabled.\r\nDefault is false."
    xml:
      name: VisibleAreaOptions
    description: Options for Post Messaging in Iframes.
  AuthenticationMethod:
    type: object
    required:
    - DiscriminatorType
    discriminator: DiscriminatorType
    properties:
      DiscriminatorType:
        type: string
        description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    xml:
      name: AuthenticationMethod
    description: "Abstract class, use the derived classes:\r\n- AuthenticationMethodCertificate\r\n- AuthenticationMethodFacebook\r\n- AuthenticationMethodGenericOAuthClient\r\n- AuthenticationMethodGenericSamlClient\r\n- AuthenticationMethodGoogle\r\n- AuthenticationMethodIdentityServer\r\n- AuthenticationMethodNamirialRemoteSignature\r\n- AuthenticationMethodPin\r\n- AuthenticationMethodSms\r\n- AuthenticationMethodUserId\r\n- AuthenticationMethodWindowsLive\r\n- AuthenticationMethodBankId\r\n            \r\nFor usage see sample code.\r\n\r\nMethod to authenticate."
  WorkstepIdStampConfiguration:
    type: object
    properties:
      ReferenceCorner:
        type: string
        description: Defines the corner to reference.
        enum:
        - Upper_Right
        - Upper_Left
        - Lower_Right
        - Lower_Left
        x-ms-enum:
          name: ReferenceCornerType
          modelAsString: false
      Color:
        type: string
        description: Defines the color. (e.g. "blue")
      Location:
        description: Defines the location of this object.
        $ref: '#/definitions/WorkstepIdStampConfigurationLocation'
    xml:
      name: WorkstepIdStampConfiguration
    description: Configuration of WorkstepIdStamp.
  NotificationConfiguration:
    type: object
    properties:
      NotificationEventsToSend:
        description: Defines the events that should be send.
        $ref: '#/definitions/NotificationEventsToSend'
      NotificationUrl:
        type: string
        description: The url of the notifcation.
    xml:
      name: NotificationConfiguration
    description: Configure the notifications.
  GeneralPolicies:
    type: object
    properties:
      AllowSaveDocument:
        type: boolean
        description: Is the client allowed to save the workstep document.
      AllowSaveAuditTrail:
        type: boolean
        description: Is the client allowed to save the audittrail document.
      AllowRotatingPages:
        type: boolean
        description: Is the client allowed to rotate the pages of the document.
        default: true
      AllowAppendFileToWorkstep:
        type: boolean
        description: Is the client allowed to append a file to the workstep.
      AllowAppendTaskToWorkstep:
        type: boolean
        description: Is the client allowed to add append tasks to the workstep.
      AllowEmailDocument:
        type: boolean
        description: Is the client allowed to email the workstep document.
      AllowPrintDocument:
        type: boolean
        description: Is the client allowed to print the workstep document.
      AllowFinishWorkstep:
        type: boolean
        description: Is the client allowed to finish the workstep.
        default: true
      AllowRejectWorkstep:
        type: boolean
        description: Is the client allowed to reject the workstep.
      AllowRejectWorkstepDelegation:
        type: boolean
        description: Is the client allowed to reject the workstep with reject type 'Delegation'.
      AllowUndoLastAction:
        type: boolean
        description: Is the client allowed to undo actions.
        default: true
      AllowColorizePdfForms:
        type: boolean
        description: Is the client allowed to colorize pdf forms.
      AllowAdhocPdfAttachments:
        type: boolean
        description: Is the client allowed to add adhoc attachments.
      AllowAdhocSignatures:
        type: boolean
        description: Is the client allowed to add signatures which are not defined in the tasks.
      AllowAdhocStampings:
        type: boolean
        description: Is the client allowed to add stampings which are not defined in the tasks.
      AllowAdhocFreeHandAnnotations:
        type: boolean
        description: Is the client allowed to add adhoc freehand annotations.
      AllowAdhocTypewriterAnnotations:
        type: boolean
        description: Is the client allowed to add adhoc typewriter annotations.
      AllowAdhocPictureAnnotations:
        type: boolean
        description: Is the client allowed to add adhoc picture annotations.
      AllowAdhocPdfPageAppending:
        type: boolean
        description: Is the client allowed to append adhoc documents.
      AllowReloadOfFinishedWorkstep:
        type: boolean
        description: Allow reload of finished workstep.
    xml:
      name: GeneralPolicies
    description: Defines general policies for this workstep.
  WorkstepTasks:
    type: object
    properties:
      PictureAnnotationMinResolution:
        type: integer
        format: int32
        description: Minimum resolution for PictureAnnotation of the picture based on the target size.
        default: -1
      PictureAnnotationMaxResolution:
        type: integer
        format: int32
        description: Minimum resolution of PictureAnnotation the picture based on the target size.
        default: -1
      PictureAnnotationColorDepth:
        type: string
        description: Defines the color depth for PictureAnnotation.
        default: "Color16M"
        enum:
        - Color16M
        - Grayscale256
        x-ms-enum:
          name: ColorDepthType
          modelAsString: false
      SetFormFieldsToReadOnlyAfterTask:
        type: string
        description: set all form fields in the document to readonly right before this task is executed.
      SequenceMode:
        type: string
        description: Mode for sequence of
        default: "NoSequenceEnforced"
        enum:
        - NoSequenceEnforced
        - SequenceOnlyRequiredTasks
        - SequenceEnforced
        x-ms-enum:
          name: WorkstepTasksSequenceMode
          modelAsString: false
      PositionUnits:
        type: string
        description: Define the default position units.
        default: "PdfUnits"
        enum:
        - PdfUnits
        - Inches
        - Millimeters
        x-ms-enum:
          name: PositionUnitsType
          modelAsString: false
      ReferenceCorner:
        type: string
        description: Define the default reference corner.
        default: "Lower_Left"
        enum:
        - Upper_Right
        - Upper_Left
        - Lower_Right
        - Lower_Left
        x-ms-enum:
          name: ReferenceCornerType
          modelAsString: false
      Tasks:
        type: array
        xml:
          name: WorkstepTask
          wrapped: true
        description: Collection of tasks that are assigned and have to be processed.
        items:
          $ref: '#/definitions/WorkstepTask'
    xml:
      name: WorkstepTasks
  FinalizeActions:
    type: object
    properties:
      FinalizeActionList:
        type: array
        xml:
          name: FinalizeAction
          wrapped: true
        description: Collection of finalize actions.
        items:
          $ref: '#/definitions/FinalizeAction'
    xml:
      name: FinalizeActions
    description: Allows to define actions which will be executed when the workstep will be finished. Those actions are performed before the ServerAction will be called and, depending on the type of the action, it might change the documents according to the workstep!
  SignatureTimestampData:
    type: object
    properties:
      Uri:
        type: string
        description: Uri for the SignatureTimestampData.
      Username:
        type: string
        description: Define the username.
      Password:
        type: string
        description: Define the password.
      SignatureHashAlgorithm:
        type: string
        description: Define the HashAlgorithm for the signature.
        enum:
        - Sha1
        - Sha256
        - Sha512
        x-ms-enum:
          name: HashAlgorithms
          modelAsString: false
      AuthenticationCertifiateDescriptor:
        description: Configure the AuthenticationCertifiateDescriptor for this object.
        $ref: '#/definitions/AuthenticationCertificateDescriptor'
    xml:
      name: SignatureTimestampData
    description: Configure SignatureTimestampData.
  SigningCertificateDescriptor:
    type: object
    properties:
      Identifier:
        type: string
        description: Identifier for this
      Type:
        type: string
        description: Defines which type should be used.
        enum:
        - Sha1Thumbprint
        - Subject
        x-ms-enum:
          name: SigningCertificateDescriptorType
          modelAsString: false
      Csp:
        type: string
        description: Defines which Csp type should be used.
        enum:
        - Default
        - Custom
        x-ms-enum:
          name: SigningCertificateDescriptorCspType
          modelAsString: false
    xml:
      name: SigningCertificateDescriptor
    description: Configure the
  WorkstepIdStampConfigurationLocation:
    type: object
    properties:
      Size:
        description: Defines width and height of the object.
        $ref: '#/definitions/Size'
      MarginLeft:
        type: number
        format: double
        description: Maring from left.
      MarginTop:
        type: number
        format: double
        description: Margin from top.
    xml:
      name: WorkstepIdStampConfigurationLocation
    description: Defines the location of WorkstepIdStampConfiguration.
  NotificationEventsToSend:
    type: object
    properties:
      NotificationEvents:
        type: array
        xml:
          name: NotifcationEventType
          wrapped: true
        description: Collection of notification event types.
        items:
          type: string
          enum:
          - ConfirmTransactionCode
          - DefaultEventType
          - AgreementAccepted
          - AgreementRejected
          - RequestPrepareAuthenticationInformationSuccess
          - PrepareAuthenticationSuccess
          - AuthenticationFailed
          - AuthenticationRejected
          - AuthenticationSuccess
          - ReAuthenticationFailed
          - AuditTrailRequested
          - AuditTrailXmlRequested
          - CalledPage
          - WhoIsInformation
          - DocumentDownloaded
          - FlattenedDocumentDownloaded
          - AddedAnnotation
          - AddedAttachment
          - AppendedDocument
          - FormsFilled
          - ConfirmReading
          - PageViewChanged
          - SendTransactionCode
          - PrepareSignWorkstepDocument
          - SignWorkstepDocument
          - UndoAction
          - WorkstepCreated
          - WorkstepFinished
          - WorkstepRejected
          - DisablePolicyAndValidityChecks
          - EnablePolicyAndValidityChecks
          - AppendFileToWorkstep
          - AppendTasksToWorkstep
          - SetOptionalDocumentState
          - StartBatch
          - EndBatch
          - PreparePayloadForBatch
          x-ms-enum:
            name: NotifcationEventType
            modelAsString: false
    xml:
      name: NotificationEventsToSend
    description: Defines the events that should be send.
  WorkstepTask:
    type: object
    required:
    - DiscriminatorType
    discriminator: DiscriminatorType
    properties:
      IsRequired:
        type: boolean
        description: Define if the task is required.
        default: false
      Id:
        type: string
        description: Define the identifier for the task.
      DisplayName:
        type: string
        description: Define the name to be displayed.
      DocRefNumber:
        type: integer
        format: int32
        description: Document number of the task.
      AdditionalInformation:
        type: string
        description: Additional information for the client
      BatchId:
        type: string
        description: Defines multiple tasks which can be executed as a batch (e.g. signatures which accept same data).
      DiscriminatorType:
        type: string
        description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    xml:
      name: WorkstepTask
    description: "Abstract class, use the derived classes:\r\n- Agreements\r\n- AppendPages\r\n- Attachment\r\n- FormGroup\r\n- PictureAnnotationConfiguration\r\n- ReadingTask\r\n- Signature\r\n- SignPkcs7\r\n- TypewriterAnnotation\r\n            \r\nFor usage see sample code."
  FinalizeAction:
    type: object
    required:
    - DiscriminatorType
    discriminator: DiscriminatorType
    properties:
      DiscriminatorType:
        type: string
        description: DiscriminatorType.
    xml:
      name: FinalizeAction
    description: "Abstract class, use the derived classes:\r\n- AutomaticSignature\r\n- Timestamp\r\n            \r\nFor usage see sample code."
  AuthenticationCertificateDescriptor:
    type: object
    properties:
      Identifier:
        type: string
        description: Identifier for this AuthenticationCertificateDescriptor.
      Type:
        type: string
        description: Defines the type.
    xml:
      name: AuthenticationCertificateDescriptor
    description: Configure an AuthenticationCertificateDescriptor.
  Size:
    type: object
    properties:
      Height:
        type: number
        format: double
        description: Height of the element.
      Width:
        type: number
        format: double
        description: Width of the element.
    xml:
      name: Size
    description: Size of an element.
  CreateDraftResult:
    type: object
    properties:
      DraftId:
        type: string
    xml:
      name: CreateDraftResult
  Error:
    type: object
    properties:
      ErrorId:
        type: string
        description: Id of the error.
      Message:
        type: string
        description: Message from the error.
      SupportId:
        type: string
        description: Support identifier.
      ThrownException:
        type: object
        properties: {}
    xml:
      name: Error
    description: Flow Api error.
  DraftCreateFromTemplateModel:
    type: object
    properties:
      TemplateId:
        type: string
        description: The id of the template.
      EnvelopeOverrideOptions:
        description: The options to override from the template.
        $ref: '#/definitions/EnvelopeOverrideOptions'
      CreateDraftOptions:
        description: Draft creation options.
        $ref: '#/definitions/CreateDraftOptions'
    xml:
      name: DraftCreateFromTemplateModel
  EnvelopeOverrideOptions:
    type: object
    properties:
      Recipients:
        type: array
        xml:
          name: EnvelopeOverrideOptionsRecipient
          wrapped: true
        description: A list of recipients which should replace the recipients in the template.
        items:
          $ref: '#/definitions/EnvelopeOverrideOptionsRecipient'
      AddFormFields:
        description: Added form fields.
        $ref: '#/definitions/AddFormFields'
      OverrideFormFieldValues:
        description: Form field descriptions which should be filled.
        $ref: '#/definitions/OverrideFormFieldOptions'
      Name:
        type: string
        description: Name of the envelope.
      EmailSubject:
        type: string
        description: Email subject of the envelope.
      EmailBody:
        type: string
        description: Email body of the envelope.
      EnableReminders:
        type: boolean
        description: "Enable reminders for the envelope.\r\nIf set, overrides the default options from the organization/user."
      FirstReminderDayAmount:
        type: integer
        format: int32
        description: "Amount of days until the first reminder is sent out.\r\nIf set, overrides the default options from the organization/user."
      RecurrentReminderDayAmount:
        type: integer
        format: int32
        description: "Amount of days until all recurrent reminders are sent out.\r\nIf set, overrides the default options from the organization/user."
      BeforeExpirationDayAmount:
        type: integer
        format: int32
        description: "Amount of days until a reminder about the expiration is sent out.\r\nIf set, overrides the default options from the organization/user."
      DaysUntilExpire:
        type: integer
        format: int32
        description: "Amount of days until the envelope expires.\r\nIf set, overrides the default options from the organization/user."
        default: 28
      CallbackUrl:
        type: string
        description: The callback url of the envelope.
      StatusUpdateCallbackUrl:
        type: string
        description: The callback url of status changes for the envelope.
      WorkstepEventCallback:
        description: Workstep event callback options.
        $ref: '#/definitions/WorkstepEventCallback'
      MetaDataXml:
        type: string
    xml:
      name: EnvelopeOverrideOptions
    description: Override options.
  EnvelopeOverrideOptionsRecipient:
    type: object
    properties:
      RecipientId:
        type: string
        description: The id of the recipient to replace.
      OrderIndex:
        type: integer
        format: int32
        description: The order index of the recipient to replace.
      Email:
        type: string
        description: The email of the recipient to replace.
      Recipient:
        description: The new recipient which should replace the existing recipient.
        $ref: '#/definitions/SendEnvelopeRecipient'
    xml:
      name: EnvelopeOverrideOptionsRecipient
    description: Description for overriding an existing recipient.
  EnvelopeStatus:
    type: object
    properties:
      Status:
        type: string
        description: The overall status of the envelope or the bulk status in case of a bulk.
        enum:
        - Draft
        - Started
        - InProgress
        - Canceled
        - Completed
        - Expired
        - Rejected
        - Template
        - CompletedWithWarnings
        - BulkCompleted
        - BulkPartlyCompleted
        x-ms-enum:
          name: EnvelopeStatusEnum
          modelAsString: false
      SendDate:
        type: string
        format: date-time
        description: The date when the envelope was sent.
      ExpirationDate:
        type: string
        format: date-time
        description: The date when the envelope will expire.
      ValidityFromCreationInDays:
        type: integer
        format: int32
        description: The number of days from when the envelope will expire, starting from the send date.
      Bulks:
        type: array
        xml:
          name: EnvelopeBulkStatus
          wrapped: true
        description: "The list of envelopes which belong to the bulk envelope in case of a bulk.\r\nIn case of a non bulk envelope it consists only of 1 envelope - the actual envelope."
        items:
          $ref: '#/definitions/EnvelopeBulkStatus'
      Documents:
        type: array
        xml:
          name: SentDocument
          wrapped: true
        description: The documents which belong to the envelope.
        items:
          $ref: '#/definitions/SentDocument'
      Id:
        type: string
        description: The id of the envelope.
      Bulk:
        type: string
        description: The bulk id of the envelope. If the envelope is not a bulk, this value is empty.
      BasicOptions:
        description: Properties of the envelope (e.g. reminder settings).
        $ref: '#/definitions/EnvelopeBasicOptions'
    xml:
      name: EnvelopeStatus
    description: The status of an envelope or bulk envelope.
  EnvelopeBulkStatus:
    type: object
    properties:
      Status:
        type: string
        description: The status of the envelope.
        enum:
        - Draft
        - Started
        - InProgress
        - Canceled
        - Completed
        - Expired
        - Rejected
        - Template
        - CompletedWithWarnings
        - BulkCompleted
        - BulkPartlyCompleted
        x-ms-enum:
          name: EnvelopeStatusEnum
          modelAsString: false
      Email:
        type: string
        description: The email of the bulk recipient. Empty if the envelope is not a bulk.
      Id:
        type: string
        description: The envelope id.
      LogDocumentId:
        type: string
        description: The document id of the audit trail information pdf file.
      LogXmlDocumentId:
        type: string
        description: The document id of the audit trail information xml file.
      FinishedDocuments:
        type: array
        xml:
          name: FinishedDocument
          wrapped: true
        description: The finished documents of the envelope containing all the actions (e.g. signed signatures, etc.).
        items:
          $ref: '#/definitions/FinishedDocument'
      Steps:
        type: array
        xml:
          name: EnvelopeStatusRecipient
          wrapped: true
        description: The steps of the envelope.
        items:
          $ref: '#/definitions/EnvelopeStatusRecipient'
    xml:
      name: EnvelopeBulkStatus
    description: "Represents a single envelope of a bulk envelope (a child).\r\nIn case of a non bulk envelope this represents a normal envelope."
  SentDocument:
    type: object
    properties:
      PageSizesInPoints:
        type: array
        xml:
          name: Size
          wrapped: true
        items:
          $ref: '#/definitions/Size'
      DocRefNumber:
        type: integer
        format: int32
      FileName:
        type: string
      FormFields:
        type: array
        xml:
          name: DocumentFormField
          wrapped: true
        items:
          $ref: '#/definitions/DocumentFormField'
    xml:
      name: SentDocument
  EnvelopeBasicOptions:
    type: object
    properties:
      Name:
        type: string
        description: Name of the envelope.
      EmailSubject:
        type: string
        description: Email subject of the envelope.
      EmailBody:
        type: string
        description: Email body of the envelope.
      EnableReminders:
        type: boolean
        description: "Enable reminders for the envelope.\r\nIf set, overrides the default options from the organization/user."
      FirstReminderDayAmount:
        type: integer
        format: int32
        description: "Amount of days until the first reminder is sent out.\r\nIf set, overrides the default options from the organization/user."
      RecurrentReminderDayAmount:
        type: integer
        format: int32
        description: "Amount of days until all recurrent reminders are sent out.\r\nIf set, overrides the default options from the organization/user."
      BeforeExpirationDayAmount:
        type: integer
        format: int32
        description: "Amount of days until a reminder about the expiration is sent out.\r\nIf set, overrides the default options from the organization/user."
      DaysUntilExpire:
        type: integer
        format: int32
        description: "Amount of days until the envelope expires.\r\nIf set, overrides the default options from the organization/user."
        default: 28
      CallbackUrl:
        type: string
        description: The callback url of the envelope.
      StatusUpdateCallbackUrl:
        type: string
        description: The callback url of status changes for the envelope.
      WorkstepEventCallback:
        description: Workstep event callback options.
        $ref: '#/definitions/WorkstepEventCallback'
      MetaDataXml:
        type: string
    xml:
      name: EnvelopeBasicOptions
    description: Options for an envelope.
  FinishedDocument:
    type: object
    properties:
      FlowDocumentId:
        type: string
      LogDocumentId:
        type: string
      Attachments:
        type: array
        xml:
          name: DocumentAttachment
          wrapped: true
        items:
          $ref: '#/definitions/DocumentAttachment'
      SignedSignatureFields:
        type: array
        xml:
          name: DocumentSignatureField
          wrapped: true
        items:
          $ref: '#/definitions/DocumentSignatureField'
      DocRefNumber:
        type: integer
        format: int32
      FileName:
        type: string
      FormFields:
        type: array
        xml:
          name: DocumentFormField
          wrapped: true
        items:
          $ref: '#/definitions/DocumentFormField'
    xml:
      name: FinishedDocument
  EnvelopeStatusRecipient:
    type: object
    properties:
      Id:
        type: string
        description: The id of the recipient.
      FirstName:
        type: string
        description: The first name of the recipient.
      LastName:
        type: string
        description: The last name of the recipient.
      OrderIndex:
        type: integer
        format: int32
        description: The order in the envelope of the recipient.
      Email:
        type: string
        description: The email address of the recipient.
      LanguageCode:
        type: string
        description: The language code of the recipient.
      Status:
        type: string
        description: The current workstep result status of the recipient.
        enum:
        - NotSigned
        - Signed
        - Rejected
        - Delegated
        x-ms-enum:
          name: WorkstepResultEnum
          modelAsString: false
      StatusReason:
        type: string
      RecipientType:
        type: string
        description: The type of the recipient.
        enum:
        - Signer
        - Cc
        - Acknowledge
        - Pkcs7Signer
        - Automatic
        x-ms-enum:
          name: RecipientTypeEnum
          modelAsString: false
      SignedDate:
        type: string
        format: date-time
        description: The date when the recipient finished its actions.
      WorkstepRedirectionUrl:
        type: string
        description: The url for generating a workstep for the recipient. Opens the viewer where the recipient has to perform his actions.
      Warnings:
        type: array
        xml:
          name: EnvelopeStatusWarning
          wrapped: true
        description: Occured warnings.
        items:
          $ref: '#/definitions/EnvelopeStatusWarning'
      Authentication:
        type: array
        xml:
          name: SendEnvelopeAuthentication
          wrapped: true
        description: The possible authentication methods for the recipient.
        items:
          $ref: '#/definitions/SendEnvelopeAuthentication'
      IsParallel:
        type: boolean
        description: Defines if the recipient is parallel and the corresponding envelope has recipients with the same order index.
      WorkstepConfiguration:
        description: WorkstepConfiguration.
        $ref: '#/definitions/WorkstepConfiguration'
    xml:
      name: EnvelopeStatusRecipient
    description: A represenation of a recipient for the current status of an envelope.
  DocumentFormField:
    type: object
    properties:
      Name:
        type: string
      Values:
        type: array
        xml:
          name: KeyValuePair
          wrapped: true
        items:
          $ref: '#/definitions/KeyValuePair'
    xml:
      name: DocumentFormField
  DocumentAttachment:
    type: object
    properties:
      Name:
        type: string
      DocumentId:
        type: string
    xml:
      name: DocumentAttachment
  DocumentSignatureField:
    type: object
    properties:
      Name:
        type: string
    xml:
      name: DocumentSignatureField
  EnvelopeStatusWarning:
    type: object
    properties:
      Type:
        type: string
        description: The warning type.
        enum:
        - None
        - LongLivedDisposableCertificateUsage
        x-ms-enum:
          name: EnvelopeStatusWarningTypeEnum
          modelAsString: false
      ContentXmlList:
        type: array
        description: The warning contents.
        items:
          type: string
    xml:
      name: EnvelopeStatusWarning
    description: Occurred warnings of an recipient.
  FindEnvelopesDescriptor:
    type: object
    properties:
      StartDate:
        type: string
        format: date-time
        description: 'If set, filters for envelopes which where created (Status: Template, Draft) or sent after the start date.'
      EndDate:
        type: string
        format: date-time
        description: 'If set, filters for envelopes which where created (Status: Template, Draft) or sent before the end date.'
      SearchText:
        type: string
        description: "If set, filters for the given text in email subject/body, envelope name/description, sender first/lastname email and recipient first/lastname email.\r\nExpensive!"
      Status:
        type: string
        description: If set, filters for envelopes by status.
        enum:
        - Draft
        - Canceled
        - Completed
        - Expired
        - Rejected
        - Template
        - ActionRequired
        - WaitingForOthers
        - ExpiringSoon
        - Active
        x-ms-enum:
          name: FindEnvelopeStatusEnum
          modelAsString: false
      InStatusSinceDays:
        type: integer
        format: int32
        description: "If set, filters for envelopes which have the given status for the given days.\r\nMust be combined with Status."
      Senders:
        type: array
        description: If set, filters for the sender email adresses.
        items:
          type: string
      Signers:
        type: array
        description: If set, filters for the given sender email adresses.
        items:
          type: string
      Recipients:
        type: array
        description: If set, filters for the given recipient email adresses.
        items:
          type: string
      WaitingForRecipient:
        type: string
        description: If set, filters for envelopes which are waiting for the given recipient email address.
      Bulk:
        type: string
        description: If set, filters for envelopes for of the given bulk id.
    xml:
      name: FindEnvelopesDescriptor
    description: Descriptor for filtering envelopes.
  ExtendedFindEnvelopesResult:
    type: object
    properties:
      Envelopes:
        type: array
        xml:
          name: ExtendedFindEnvelopesResultEntry
          wrapped: true
        description: The envelopes which match the searched criteria.
        items:
          $ref: '#/definitions/ExtendedFindEnvelopesResultEntry'
    xml:
      name: ExtendedFindEnvelopesResult
    description: The search result of the found envelopes.
  ExtendedFindEnvelopesResultEntry:
    type: object
    properties:
      Status:
        type: string
        description: The status of the envelope.
        enum:
        - Draft
        - Started
        - InProgress
        - Canceled
        - Completed
        - Expired
        - Rejected
        - Template
        - CompletedWithWarnings
        - BulkCompleted
        - BulkPartlyCompleted
        x-ms-enum:
          name: EnvelopeStatusEnum
          modelAsString: false
      Id:
        type: string
        description: The envelope id.
      Name:
        type: string
        description: The name of the envelope.
      MetaDataXml:
        type: string
      Bulk:
        type: string
        description: "The bulk id. \r\nOnly set if the envelope is part of a bulk."
    xml:
      name: ExtendedFindEnvelopesResultEntry
    description: Represents an envelope.
  EnvelopePrepareModel:
    type: object
    properties:
      SspFileIds:
        type: array
        items:
          type: string
      AdHocWorkstepConfiguration:
        $ref: '#/definitions/AdHocWorkstepConfiguration'
      PrepareSendEnvelopeStepsDescriptor:
        $ref: '#/definitions/PrepareSendEnvelopeStepsDescriptor'
    xml:
      name: EnvelopePrepareModel
  AdHocWorkstepConfiguration:
    type: object
    properties:
      WorkstepLabel:
        type: string
        description: A label for this workstep
        default: ""
      SmallTextZoomFactorPercent:
        type: integer
        format: int32
        description: Defines a image generation correction factor. If for example this document contains very small text, which might not be readable with the standard image resolution of the client, this factor can be used to tell the client to get a higher resolution.
        default: 100
      WorkstepTimeToLiveInMinutes:
        type: integer
        format: int32
        description: Defines the time to live of all the documents created by the workstep. After this time to live is expired, all documents are deleted. '0' sets the time to live to forever.
        default: 43200
      FinishAction:
        description: Configure the actions done by the server and the by the clients when the workstep is finished.
        $ref: '#/definitions/FinishAction'
      NoSequenceEnforced:
        type: boolean
        description: Define the sequence mode.
        default: true
      SigTemplate:
        description: A template for signature definitions.
        $ref: '#/definitions/SigTemplate'
      ParseFormFields:
        description: Configuration for parsing the form fields.
        $ref: '#/definitions/ParseFormFields'
      AdhocPolicies:
        description: If the workstep is not generated by hand but automatically generated by the Workstep Controller AdhocPolicies are specified.
        $ref: '#/definitions/AdhocPolicies'
      ViewerPreferences:
        description: The Viewer Preferences can be used to adapt the appearance and the behavior of the SignAnyWhere Viewer.
        $ref: '#/definitions/ViewerPreferences'
      SignatureConfigurations:
        type: array
        xml:
          name: SignatureConfiguration
          wrapped: true
        description: Configurate the signatures for this workstep. One default configuration has to be defined. The default configuration is used for flatten signatures, adhoc signatures and signature fields which do not reference a special signature plugin configuration. The default configuration does not contain the attribute 'spcId'. If the attribute 'spcId' is defined the signature plugin configuration does only apply to signature fields referencing the configuration by specifiying <param name="spcId">id</param>.
        items:
          $ref: '#/definitions/SignatureConfiguration'
      SigStringParsingConfiguration:
        description: Configure the signature string parsing.
        $ref: '#/definitions/SigStringParsingConfiguration'
      GeneralPolicies:
        description: Defines general policies for this workstep.
        $ref: '#/definitions/GeneralPolicies'
      FinalizeActions:
        description: Allows to define actions which will be executed when the workstep will be finished. Those actions are performed before the ServerAction will be called and, depending on the type of the action, it might change the documents according to the workstep!
        $ref: '#/definitions/FinalizeActions'
      TransactionCodeConfigurations:
        type: array
        xml:
          name: TransactionCodeConfiguration
          wrapped: true
        description: Collection of TransactionCodeConfigurations
        items:
          $ref: '#/definitions/TransactionCodeConfiguration'
    xml:
      name: AdHocWorkstepConfiguration
    description: Configure the adhoc workstep creation.
  PrepareSendEnvelopeStepsDescriptor:
    type: object
    properties:
      ClearFieldMarkupString:
        type: boolean
        description: Specifies if the parsed field markup string should be deleted from the pdf.
    xml:
      name: PrepareSendEnvelopeStepsDescriptor
  SigTemplate:
    type: object
    properties:
      Size:
        description: Define width and height of the elements.
        $ref: '#/definitions/Size'
      AllowedSignatureTypes:
        type: array
        xml:
          name: SigType
          wrapped: true
        description: Allowed signatures types.
        items:
          $ref: '#/definitions/SigType'
    xml:
      name: SigTemplate
    description: A template for signature definitions.
  ParseFormFields:
    type: object
    properties:
      MapRequiredFieldsToRequiredTask:
        type: boolean
        description: Maps required fields to required task.
      FormsGrouping:
        type: string
        description: Defines how the forms are grouped.
        default: "PerPage"
        enum:
        - PerPage
        - PerDocument
        - PerEnvelope
        x-ms-enum:
          name: FormsGroupingType
          modelAsString: false
      ReturnSimplifiedConfig:
        type: boolean
        description: Defines if the simplified configuration should be returned.
        default: true
      AddKeepExistingValueFlag:
        type: boolean
        description: Adds KeepExisitingValue flag.
        default: true
      ParseFormField:
        type: boolean
        description: Defines if form fields should be parsed.
        default: true
    xml:
      name: ParseFormFields
    description: Configuration for parsing the form fields.
  AdhocPolicies:
    type: object
    properties:
      AllowModificationsAfterSignature:
        type: boolean
        description: Allows modification after the signature.
        default: true
    xml:
      name: AdhocPolicies
    description: If the workstep is not generated by hand but automatically generated by the Workstep Controller AdhocPolicies are specified
  SigStringParsingConfiguration:
    type: object
    properties:
      SigStringsForParsings:
        type: array
        xml:
          name: SigStringsForParsing
          wrapped: true
        description: Collection of all SigStringsForParsing configurations.
        items:
          $ref: '#/definitions/SigStringsForParsing'
    xml:
      name: SigStringParsingConfiguration
    description: Configure the signature string parsing.
  SigType:
    type: object
    required:
    - DiscriminatorType
    discriminator: DiscriminatorType
    properties:
      Id:
        type: string
        description: Define a identifier.
      DiscriminatorType:
        type: string
        description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
      Preferred:
        type: boolean
        description: Define if this SigType is the preferred one.
    xml:
      name: SigType
    description: "Abstract class, use the derived classes:\r\n- SigTypeAutomaticSignature\r\n- SigTypeBiometricSignature\r\n- SigTypeBiometricSignatureAndLocalCertificate\r\n- SigTypeExternalSigningProcess\r\n- SigTypeLocalCertificate\r\n- SigTypeClick2Sign\r\n- SigTypeDraw2Sign\r\n- SigTypeType2Sign\r\n- SigTypeTransactionCode\r\n- SigTypeTransactionCodeAndBiometricSignature\r\n- SigTypeTransactionCodeAndLocalCertificate\r\n- SigTypeTransactionCodeBiometricSignatureAndLocalCertificate\r\n            \r\nFor usage see sample code."
  SigStringsForParsing:
    type: object
    properties:
      StartPattern:
        type: string
        description: Defines the start pattern.
      EndPattern:
        type: string
        description: Defines the end pattern.
      ClearSigString:
        type: boolean
        description: Configure if the SigString should be cleared.
      SearchEntireWordOnly:
        type: boolean
        description: Configure if the entire word should be searched only.
    xml:
      name: SigStringsForParsing
    description: Configure how a SigString should be parsed.
  PrepareSendEnvelopeStepsResult:
    type: object
    properties:
      AdHocWorkstepConfigResult:
        $ref: '#/definitions/WorkstepConfiguration'
      Steps:
        type: array
        xml:
          name: SendEnvelopeStep
          wrapped: true
        items:
          $ref: '#/definitions/SendEnvelopeStep'
      AddFormFields:
        $ref: '#/definitions/AddFormFields'
    xml:
      name: PrepareSendEnvelopeStepsResult
  EnvelopeSendModel:
    type: object
    properties:
      SspFileIds:
        type: array
        description: The ids of uploaded files.
        items:
          type: string
      SendEnvelopeDescription:
        description: The description of the envelope.
        $ref: '#/definitions/SendEnvelopeDescription'
    xml:
      name: EnvelopeSendModel
    description: Model for sending envelopes.
  SendEnvelopeResult:
    type: object
    properties:
      BulkChildrenIds:
        type: array
        xml:
          name: SendEnvelopeBulkResultEntry
          wrapped: true
        items:
          $ref: '#/definitions/SendEnvelopeBulkResultEntry'
      EnvelopeId:
        type: string
    xml:
      name: SendEnvelopeResult
  SendEnvelopeBulkResultEntry:
    type: object
    properties:
      EnvelopeId:
        type: string
      Email:
        type: string
    xml:
      name: SendEnvelopeBulkResultEntry
  EnvelopeSendFromTemplateModel:
    type: object
    properties:
      TemplateId:
        type: string
        description: The Id of the template.
      EnvelopeOverrideOptions:
        description: Options which should be overriden for teh template.
        $ref: '#/definitions/EnvelopeOverrideOptions'
    xml:
      name: EnvelopeSendFromTemplateModel
    description: Description for sending an envelope from a template.
  SendRemindersResult:
    type: object
    properties:
      Count:
        type: integer
        format: int32
        description: The number of reminder emails which were sent out.
    xml:
      name: SendRemindersResult
    description: Holds information about the sent reminders.
  CopyDocumentFromTemplateResult:
    type: object
    properties:
      SspFileIds:
        type: array
        description: SspFileId.
        items:
          type: string
      SendEnvelopeDescription:
        description: SendEnvelopeDescription.
        $ref: '#/definitions/SendEnvelopeDescriptionTemplate'
    xml:
      name: CopyDocumentFromTemplateResult
    description: CopyDocumentFromTemplateResult.
  SendEnvelopeDescriptionTemplate:
    type: object
    properties:
      Name:
        type: string
        description: The name of the envelope.
      EmailSubject:
        type: string
        description: The subject of the sent out emails.
      EmailBody:
        type: string
        description: The body of the sent out emails.
      DisplayedEmailSender:
        type: string
        description: The name of the email sender.
      EnableReminders:
        type: boolean
        description: If true, reminders are used.
      FirstReminderDayAmount:
        type: integer
        format: int32
        description: Amount of days until the first reminder is sent out.
      RecurrentReminderDayAmount:
        type: integer
        format: int32
        description: Amount of days until all recurrent reminders are sent out.
      BeforeExpirationDayAmount:
        type: integer
        format: int32
        description: Amount of days until a reminder about the expiration is sent out.
      DaysUntilExpire:
        type: integer
        format: int32
        description: Amount of days until the envelope expires.
        default: 28
      CallbackUrl:
        type: string
        description: The callback url of the envelope.
      StatusUpdateCallbackUrl:
        type: string
        description: The callback url of status changes for the envelope.
      WorkstepEventCallback:
        description: Workstep event callback options.
        $ref: '#/definitions/WorkstepEventCallback'
      Steps:
        type: array
        xml:
          name: SendEnvelopeStep
          wrapped: true
        description: The steps for the envelope.
        items:
          $ref: '#/definitions/SendEnvelopeStep'
      AddFormFields:
        description: Added form fields.
        $ref: '#/definitions/AddFormFields'
      MetaDataXml:
        type: string
    xml:
      name: SendEnvelopeDescriptionTemplate
  ReplaceRecipientData:
    type: object
    properties:
      Recipient:
        description: New information for the recipient which is replaced
        $ref: '#/definitions/SendEnvelopeRecipient'
      WorkstepConfiguration:
        description: "Optional, new workstep configuration for the recipient which is replaced\r\nOnly supported for <code>RecipientType</code> Signer and Pkcs7Signer."
        $ref: '#/definitions/WorkstepConfiguration'
    xml:
      name: ReplaceRecipientData
    description: Describes the new recipient
  UploadSspFileResult:
    type: object
    properties:
      SspFileId:
        type: string
        description: The Id of the file. A <code>GUID</code> converted to a string.
    xml:
      name: UploadSspFileResult
    description: A result after uploading the file.
  Teams:
    type: object
    properties:
      TeamList:
        type: array
        xml:
          name: Team
          wrapped: true
        description: The Teams list.
        items:
          $ref: '#/definitions/Team'
    xml:
      name: Teams
    description: A List of Teams.
  Team:
    type: object
    properties:
      Name:
        type: string
        description: The name of the team.
      AllowEnvelopeSharingWithinTeam:
        type: boolean
        description: Indicates if envelopes are shared among members of this team.
        default: false
      AllowTemplateSharingWithinTeam:
        type: boolean
        description: Indicates if templates are shared among members of this team.
        default: false
      Head:
        description: The team leader.
        $ref: '#/definitions/TeamMember'
    xml:
      name: Team
    description: A representation of a team in eSignAnyWhere.
  TeamMember:
    type: object
    properties:
      Email:
        type: string
        description: The email of the team member.
      Members:
        type: array
        xml:
          name: TeamMember
          wrapped: true
        description: The team members which are one hiarchy step deeper.
        items:
          $ref: '#/definitions/TeamMember'
    xml:
      name: TeamMember
    description: Representation of s team member.
  UserCreateModel:
    type: object
    properties:
      UserDescription:
        description: The user which should be created.
        $ref: '#/definitions/UserDescription'
      UserActivationDescriptor:
        description: Information about the user activation after the user creation.
        $ref: '#/definitions/UserActivationDescriptor'
    xml:
      name: UserCreateModel
  UserDescription:
    type: object
    properties:
      Email:
        type: string
        description: The email address of the User.
      FirstName:
        type: string
        description: The first name of the user.
      LastName:
        type: string
        description: The last name of the user.
      UserName:
        type: string
        description: username of the user (used for usersynchronisation and alternative logins)
      Sid:
        type: string
        description: sid of the user (used for usersynchronisation and alternative logins)
      JobTitle:
        type: string
        description: The job title of the user.
      PhoneNumber:
        type: string
        description: The phone number of the user.
      Role:
        type: string
        description: The role of the user, which defines its permissions.
        enum:
        - None
        - PowerUser
        - RegisteredSigner
        x-ms-enum:
          name: UserRoles
          modelAsString: false
      IsUserManager:
        type: boolean
        description: Defines if the user can manage other users (add/delete/modify).
      DefaultSubject:
        type: string
      DefaultMessage:
        type: string
      NotifyRecipientOnActionNeeded:
        type: boolean
        description: Defines if the user gets an email notification every time if his actions are needed for an envelope.
      NotifySenderCompleteEnvelope:
        type: boolean
        description: Defines if the user gets an email notification when a dedicated envelope is finished.
      NotifySenderDeclined:
        type: boolean
        description: Defines if the user gets an email notification when a recipient rejected an envelope.
      NotifySenderDeliveryFailed:
        type: boolean
        description: Sends an email to the user when the delivery of the envelope failed.
      NotifySenderViewed:
        type: boolean
        description: Sends an email when a recipient viewed an envelope of the user.
      SignatureImage:
        type: string
        format: byte
        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
      Authentications:
        type: array
        xml:
          name: UserAuthentication
          wrapped: true
        items:
          $ref: '#/definitions/UserAuthentication'
    xml:
      name: UserDescription
  UserActivationDescriptor:
    type: object
    properties:
      SendInvitationMail:
        type: boolean
        description: A email should be sent after the user creation.
    xml:
      name: UserActivationDescriptor
  UserAuthentication:
    type: object
    properties:
      DiscriminatorType:
        type: string
        description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    xml:
      name: UserAuthentication
    description: "Abstract class, use the derived classes:\r\n- UserAuthenticationSaml\r\n            \r\nFor usage see sample code."
  CreateUserResult:
    type: object
    properties:
      CreatedUserIds:
        type: array
        items:
          type: string
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
    xml:
      name: CreateUserResult
  UserUpdateDescription:
    type: object
    properties:
      Email:
        type: string
        description: The email address of the User.
      FirstName:
        type: string
        description: The first name of the user.
      LastName:
        type: string
        description: The last name of the user.
      UserName:
        type: string
        description: username of the user (used for usersynchronisation and alternative logins)
      Sid:
        type: string
        description: sid of the user (used for usersynchronisation and alternative logins)
      JobTitle:
        type: string
        description: The job title of the user.
      PhoneNumber:
        type: string
        description: The phone number of the user.
      Role:
        type: string
        description: The role of the user, which defines its permissions.
        enum:
        - None
        - PowerUser
        - RegisteredSigner
        x-ms-enum:
          name: UserRoles
          modelAsString: false
      IsUserManager:
        type: boolean
        description: Defines if the user can manage other users (add/delete/modify).
      IsEnabled:
        type: boolean
        description: Defines if the user is enabled.
      DefaultSubject:
        type: string
        description: Defines the default subject used for sending envelopes
      DefaultMessage:
        type: string
        description: Defines the default message used for sending envelopes
      NotifyRecipientOnActionNeeded:
        type: boolean
        description: Defines if the user gets an email notification every time if his actions are needed for an envelope.
      NotifySenderCompleteEnvelope:
        type: boolean
        description: Defines if the user gets an email notification when a dedicated envelope is finished.
      NotifySenderDeclined:
        type: boolean
        description: Defines if the user gets an email notification when a recipient rejected an envelope.
      NotifySenderDeliveryFailed:
        type: boolean
        description: Sends an email to the user when the delivery of the envelope failed.
      NotifySenderViewed:
        type: boolean
        description: Sends an email when a recipient viewed an envelope of the user.
      AutomatedDelegationSettings:
        description: Automated delegation settings.
        $ref: '#/definitions/AutomatedDelegationSettings'
      SignatureImage:
        type: string
        format: byte
        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
      Authentications:
        type: array
        xml:
          name: UserAuthentication
          wrapped: true
        items:
          $ref: '#/definitions/UserAuthentication'
    xml:
      name: UserUpdateDescription
    description: "This object is used for updating an existing user. \r\nProperties, which are not set will not change the existing value."
  AutomatedDelegationSettings:
    type: object
    properties:
      Reason:
        type: string
        description: Reason for automated delagation.
      EndDate:
        type: string
        description: Endtime of automated delegation.
      DelegateeUserId:
        type: string
        description: Delegatee user id.
      UtilizeAlsoOnCopyRecipients:
        type: boolean
        description: If cc recipient should be delgated.
    xml:
      name: AutomatedDelegationSettings
    description: Automated delegation settings.
  DeleteUserReassignDescriptor:
    type: object
    properties:
      UserId:
        type: string
        description: The id of the user which receives the assignments.
      ReassignDrafts:
        type: boolean
        description: Reassigns drafts if true.
      ReassignTemplates:
        type: boolean
        description: Reassigns templates if true.
      ReassignClipboard:
        type: boolean
        description: Reassigns clipboard items if true.
      ReassignAddressBook:
        type: boolean
        description: Reassigns address book entries if true.
    xml:
      name: DeleteUserReassignDescriptor
    description: Defines the reassignments after the deletion of a user.
  FindUsersDescriptor:
    type: object
    properties:
      Role:
        type: string
        description: If set, filters by user role.
        enum:
        - None
        - PowerUser
        - RegisteredSigner
        x-ms-enum:
          name: UserRoles
          modelAsString: false
      IsUserManager:
        type: boolean
        description: If set, filters if the user manager flag is set.
      IsAutomatedDelegatedUser:
        type: boolean
        description: User call to find automated deligated users.
    xml:
      name: FindUsersDescriptor
    description: Descriptor to filter users.
  ExtendedFindUsersResult:
    type: object
    properties:
      Entries:
        type: array
        xml:
          name: ExtendedFindUsersResultEntry
          wrapped: true
        items:
          $ref: '#/definitions/ExtendedFindUsersResultEntry'
    xml:
      name: ExtendedFindUsersResult
  ExtendedFindUsersResultEntry:
    type: object
    properties:
      Id:
        type: string
        description: The id of the User.
      Email:
        type: string
        description: The email address of the User.
      FirstName:
        type: string
        description: The first name of the user.
      LastName:
        type: string
        description: The last name of the user.
      UserName:
        type: string
        description: username of the user (used for usersynchronisation and alternative logins)
      Sid:
        type: string
        description: sid of the user (used for usersynchronisation and alternative logins)
      Role:
        type: string
        description: The role of the user, which defines its permissions.
        enum:
        - None
        - PowerUser
        - RegisteredSigner
        x-ms-enum:
          name: UserRoles
          modelAsString: false
      IsUserManager:
        type: boolean
        description: Defines if the user can manage other users (add/delete/modify).
      IsEnabled:
        type: boolean
        description: Defines if the user is enabled and allowed to use the system.
      Authentications:
        type: array
        xml:
          name: UserAuthentication
          wrapped: true
        items:
          $ref: '#/definitions/UserAuthentication'
    xml:
      name: ExtendedFindUsersResultEntry
  FlowApiResult:
    type: object
    properties:
      Success:
        type: boolean
      Version:
        type: string
    xml:
      name: FlowApiResult
  Agreements:
    xml:
      name: Agreements
    allOf:
    - $ref: '#/definitions/WorkstepTask'
    - type: object
      properties:
        Texts:
          type: array
          xml:
            name: Text
            wrapped: true
          description: Collection of configured texts.
          items:
            $ref: '#/definitions/Text'
        Headings:
          type: array
          xml:
            name: Text
            wrapped: true
          description: Collection of configured headings.
          items:
            $ref: '#/definitions/Text'
        IsRequired:
          type: boolean
          description: Define if the task is required.
          default: false
        Id:
          type: string
          description: Define the identifier for the task.
        DisplayName:
          type: string
          description: Define the name to be displayed.
        DocRefNumber:
          type: integer
          format: int32
          description: Document number of the task.
        AdditionalInformation:
          type: string
          description: Additional information for the client
        BatchId:
          type: string
          description: Defines multiple tasks which can be executed as a batch (e.g. signatures which accept same data).
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: Agreements task.
  AppendPages:
    xml:
      name: AppendPages
    allOf:
    - $ref: '#/definitions/WorkstepTask'
    - type: object
      properties:
        IsRequired:
          type: boolean
          description: Define if the task is required.
          default: false
        Id:
          type: string
          description: Define the identifier for the task.
        DisplayName:
          type: string
          description: Define the name to be displayed.
        DocRefNumber:
          type: integer
          format: int32
          description: Document number of the task.
        AdditionalInformation:
          type: string
          description: Additional information for the client
        BatchId:
          type: string
          description: Defines multiple tasks which can be executed as a batch (e.g. signatures which accept same data).
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: AppendPages task.
  Attachment:
    xml:
      name: Attachment
    allOf:
    - $ref: '#/definitions/WorkstepTask'
    - type: object
      properties:
        PositionPage:
          type: integer
          format: int32
          description: Page number for the attachment.
        Position:
          description: Exact position for the attachment.
          $ref: '#/definitions/Position'
        Size:
          description: Width and Height of the object.
          $ref: '#/definitions/Size'
        IconName:
          type: string
          description: 'The name of the adobe default icon to be displayed. Values that should be displayed by most viewers are: ''Graph'', ''PushPin'', ''Paperclip'' and ''Tag''. Others may be implemented by the pdf viewer. Default value: ''Paperclip'' if no iconName or appearance image is given.'
        AppearanceImageDocumentId:
          type: string
          description: The document id of the image used for the appearance. If set this appearance overwrites the icon.
        FileName:
          type: string
          description: A hint for the client to name the attachment, but the name has to be set by the client.
          readOnly: true
        IsRequired:
          type: boolean
          description: Define if the task is required.
          default: false
        Id:
          type: string
          description: Define the identifier for the task.
        DisplayName:
          type: string
          description: Define the name to be displayed.
        DocRefNumber:
          type: integer
          format: int32
          description: Document number of the task.
        AdditionalInformation:
          type: string
          description: Additional information for the client
        BatchId:
          type: string
          description: Defines multiple tasks which can be executed as a batch (e.g. signatures which accept same data).
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: Attachment task.
  Position:
    type: object
    properties:
      PositionX:
        type: number
        format: double
        description: X position of the element.
      PositionY:
        type: number
        format: double
        description: Y position of the element.
    xml:
      name: Position
    description: Positioning of elements.
  FormGroup:
    xml:
      name: FormGroup
    allOf:
    - $ref: '#/definitions/WorkstepTask'
    - type: object
      properties:
        Forms:
          type: array
          xml:
            name: Form
            wrapped: true
          description: Lists all the form elements which are part of this group.
          items:
            $ref: '#/definitions/Form'
        IsRequired:
          type: boolean
          description: Define if the task is required.
          default: false
        Id:
          type: string
          description: Define the identifier for the task.
        DisplayName:
          type: string
          description: Define the name to be displayed.
        DocRefNumber:
          type: integer
          format: int32
          description: Document number of the task.
        AdditionalInformation:
          type: string
          description: Additional information for the client
        BatchId:
          type: string
          description: Defines multiple tasks which can be executed as a batch (e.g. signatures which accept same data).
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: Information about a forms group in this workstep.
  Form:
    type: object
    required:
    - DiscriminatorType
    discriminator: DiscriminatorType
    properties:
      Id:
        type: string
        description: Identifier for the form.
      PositionPage:
        type: integer
        format: int32
        description: Page number for the form.
        default: 1
      DocRefNumber:
        type: integer
        format: int32
        description: Document number for the form.
      Position:
        description: Exact position of the form.
        $ref: '#/definitions/Position'
      Size:
        description: Width and Height of the object.
        $ref: '#/definitions/Size'
      IsHidden:
        type: boolean
        description: Define if it is hidden.
        default: false
      ExportValue:
        type: string
        description: The export value of the form field.
      Description:
        type: string
        description: Description to provide details about the element.
      KeepExistingValue:
        type: boolean
        description: If true, form value from Pdf is used.
      CustomOrder:
        type: integer
        format: int32
        description: Increasing order number. Can be used for tabbing through the form elements.
        readOnly: true
      DiscriminatorType:
        type: string
        description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    xml:
      name: Form
    description: "Abstract class, use the derived classes:\r\n- BoxItem\r\n- CheckBox\r\n- ComboBox\r\n- ListBox\r\n- RadioButton\r\n- TextBox\r\n            \r\nFor usage see sample code.\r\n\r\nBase class Form of a FormGroup."
  PictureAnnotationConfiguration:
    xml:
      name: PictureAnnotationConfiguration
    allOf:
    - $ref: '#/definitions/WorkstepTask'
    - type: object
      properties:
        ColorDepth:
          type: string
          default: "Color16M"
          enum:
          - Color16M
          - Grayscale256
          x-ms-enum:
            name: ColorDepthType
            modelAsString: false
        PageNumber:
          type: integer
          format: int32
          description: The page number this element is on.
        MinResolution:
          type: integer
          format: int32
          description: Minimum resolution of the picture based on the target size. Default -1, means no min resolution.
          default: -1
        MaxResolution:
          type: integer
          format: int32
          description: Maximum resolution of the picture based on the target size. Default -1, mans no max resolution.
          default: -1
        Name:
          type: string
          description: Defines the name that is used for the attachment.
        Position:
          description: Exact position of this element.
          $ref: '#/definitions/Position'
        Size:
          description: Width and height of the element.
          $ref: '#/definitions/Size'
        AddAsAttachment:
          type: boolean
          description: Define if the picture should be added as attachment to the document as well.
          default: false
        IsRequired:
          type: boolean
          description: Define if the task is required.
          default: false
        Id:
          type: string
          description: Define the identifier for the task.
        DisplayName:
          type: string
          description: Define the name to be displayed.
        DocRefNumber:
          type: integer
          format: int32
          description: Document number of the task.
        AdditionalInformation:
          type: string
          description: Additional information for the client
        BatchId:
          type: string
          description: Defines multiple tasks which can be executed as a batch (e.g. signatures which accept same data).
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: Picture annotation tasks configuration.
  ReadingTask:
    xml:
      name: ReadingTask
    allOf:
    - $ref: '#/definitions/WorkstepTask'
    - type: object
      properties:
        PositionPage:
          type: integer
          format: int32
          description: Page number that has to be read.
        AllPages:
          type: boolean
          description: Defines if all pages in the document have to be read.
        AllDocuments:
          type: boolean
          description: Defines if all documents have to be read.
        Position:
          description: Defines the exact position that has to be read.
          $ref: '#/definitions/Position'
        Size:
          description: Defines the width and height of the element that has to be read.
          $ref: '#/definitions/Size'
        IsRequired:
          type: boolean
          description: Define if the task is required.
          default: false
        Id:
          type: string
          description: Define the identifier for the task.
        DisplayName:
          type: string
          description: Define the name to be displayed.
        DocRefNumber:
          type: integer
          format: int32
          description: Document number of the task.
        AdditionalInformation:
          type: string
          description: Additional information for the client
        BatchId:
          type: string
          description: Defines multiple tasks which can be executed as a batch (e.g. signatures which accept same data).
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: Reading task.
  Signature:
    xml:
      name: Signature
    allOf:
    - $ref: '#/definitions/WorkstepTask'
    - type: object
      properties:
        PositionPage:
          type: integer
          format: int32
          description: Page number of the signature.
        Position:
          description: Exact position of the signature.
          $ref: '#/definitions/Position'
        Size:
          description: Width and height of the signature.
          $ref: '#/definitions/Size'
        AdditionalParameters:
          type: array
          xml:
            name: KeyValuePair
            wrapped: true
          description: Collection of additional parameters, as KeyValue pair.
          items:
            $ref: '#/definitions/KeyValuePair'
        AllowedSignatureTypes:
          type: array
          xml:
            name: SigType
            wrapped: true
          description: Collection of allowed SigTypes.
          items:
            $ref: '#/definitions/SigType'
        AdditionalClientInformation:
          type: string
          description: Additional client information.
        Pattern:
          type: string
          description: Pattern found from SigString parsing.
        UseTimestamp:
          type: boolean
          description: Use timestamp
          default: false
        IsRequired:
          type: boolean
          description: Define if the task is required.
          default: false
        Id:
          type: string
          description: Define the identifier for the task.
        DisplayName:
          type: string
          description: Define the name to be displayed.
        DocRefNumber:
          type: integer
          format: int32
          description: Document number of the task.
        AdditionalInformation:
          type: string
          description: Additional information for the client
        BatchId:
          type: string
          description: Defines multiple tasks which can be executed as a batch (e.g. signatures which accept same data).
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: Signature task.
  SignPkcs7:
    xml:
      name: SignPkcs7
    allOf:
    - $ref: '#/definitions/WorkstepTask'
    - type: object
      properties:
        TargetDocuments:
          type: array
          xml:
            name: TargetDocument
            wrapped: true
          description: Target documents. If TargetDocuments list is empty, all documents are targeted.
          items:
            $ref: '#/definitions/TargetDocument'
        IsRequired:
          type: boolean
          description: Define if the task is required.
          default: false
        Id:
          type: string
          description: Define the identifier for the task.
        DisplayName:
          type: string
          description: Define the name to be displayed.
        DocRefNumber:
          type: integer
          format: int32
          description: Document number of the task.
        AdditionalInformation:
          type: string
          description: Additional information for the client
        BatchId:
          type: string
          description: Defines multiple tasks which can be executed as a batch (e.g. signatures which accept same data).
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
  TargetDocument:
    type: object
    properties:
      DocRefNumber:
        type: integer
        format: int32
        description: Document number.
      IsCompleted:
        type: boolean
        description: Define if it is completed.
        readOnly: true
    xml:
      name: TargetDocument
  TypewriterAnnotation:
    xml:
      name: TypewriterAnnotation
    allOf:
    - $ref: '#/definitions/WorkstepTask'
    - type: object
      properties:
        PageNumber:
          type: integer
          format: int32
          description: The page number the annotation is on.
        TextAlign:
          type: string
          description: The typewriter annotation text alignment.
          default: "Left"
          enum:
          - Left
          - Right
          - Center
          x-ms-enum:
            name: Align
            modelAsString: false
        Position:
          description: The position of the predefined text annotation in lower left points.
          $ref: '#/definitions/Position'
        DefaultText:
          type: string
          description: Default text shown by the client.
        TextFormat:
          type: string
          description: The format of the text. For example if the text should be a date, the date format can be specified. The client can than format the text accordingly.
        DefaultTextType:
          type: string
          description: The type of the predefined text annotation. If the client is familiar with the type it can display predefined values.
        FontSettings:
          description: FontSetting to be used.
          $ref: '#/definitions/FontSettings'
        IsEditablePosition:
          type: boolean
          description: Defines if the position can be edited by the client.
          default: false
        IsEditableDefaultText:
          type: boolean
          description: Specifies if the text can be changed by the user, or if it should be autofilled by the client without user interaction.
          default: false
        IsEditableFontSettings:
          type: boolean
          description: Defines if the 'fontSettings' can be edited by the client.
          default: false
        IsRequired:
          type: boolean
          description: Define if the task is required.
          default: false
        Id:
          type: string
          description: Define the identifier for the task.
        DisplayName:
          type: string
          description: Define the name to be displayed.
        DocRefNumber:
          type: integer
          format: int32
          description: Document number of the task.
        AdditionalInformation:
          type: string
          description: Additional information for the client
        BatchId:
          type: string
          description: Defines multiple tasks which can be executed as a batch (e.g. signatures which accept same data).
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: TypeWriterAnnotation task. Information about predefined typewriter annotation.
  FontSettings:
    type: object
    properties:
      Id:
        type: string
        description: Identification for the font.
      TextColor:
        description: Choose the color for the text.
        $ref: '#/definitions/TextColor'
      Name:
        type: string
        description: Naming of the font.
      Size:
        type: number
        format: double
        description: Define the size.
      IsBold:
        type: boolean
        description: Define if the font-style should be bold.
      IsItalic:
        type: boolean
        description: Define if the font-style should be italic.
    xml:
      name: FontSettings
    description: Configure fontsettings.
  TextColor:
    type: object
    properties:
      A:
        type: integer
        format: int32
        description: Defines A value of the color.
      R:
        type: integer
        format: int32
        description: Defines R value of the color.
      G:
        type: integer
        format: int32
        description: Defines G value of the color.
      B:
        type: integer
        format: int32
        description: Defines B value of the color.
    xml:
      name: TextColor
    description: Color of an text element.
  CheckBox:
    xml:
      name: CheckBox
    allOf:
    - $ref: '#/definitions/Form'
    - type: object
      properties:
        IsReadonly:
          type: boolean
          description: Defines if the checkbox is readonly.
          default: false
        IsRequired:
          type: boolean
          description: Defines if the checkbox is required,
          default: false
        IsChecked:
          type: boolean
          description: Defines if the checkbos is checked.
          default: false
        RequiredEvalPolicy:
          type: string
          description: Defines the policy if the checkbox is required.
          default: "None"
          enum:
          - None
          - IsChecked
          x-ms-enum:
            name: RequiredEvalPolicyType
            modelAsString: false
        Id:
          type: string
          description: Identifier for the form.
        PositionPage:
          type: integer
          format: int32
          description: Page number for the form.
          default: 1
        DocRefNumber:
          type: integer
          format: int32
          description: Document number for the form.
        Position:
          description: Exact position of the form.
          $ref: '#/definitions/Position'
        Size:
          description: Width and Height of the object.
          $ref: '#/definitions/Size'
        IsHidden:
          type: boolean
          description: Define if it is hidden.
          default: false
        ExportValue:
          type: string
          description: The export value of the form field.
        Description:
          type: string
          description: Description to provide details about the element.
        KeepExistingValue:
          type: boolean
          description: If true, form value from Pdf is used.
        CustomOrder:
          type: integer
          format: int32
          description: Increasing order number. Can be used for tabbing through the form elements.
          readOnly: true
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: CheckBox form.
  ComboBox:
    xml:
      name: ComboBox
    allOf:
    - $ref: '#/definitions/Form'
    - type: object
      properties:
        IsReadonly:
          type: boolean
          description: Defines if the combobox is readonly.
          default: false
        IsRequired:
          type: boolean
          description: Defines if the combobox is required.
          default: false
        IsEditable:
          type: boolean
          description: Defines if the combobox is editable.
          default: false
        Value:
          type: string
          description: Value of the combobox.
        Items:
          type: array
          xml:
            name: BoxItem
            wrapped: true
          description: Collection of items in the combobox.
          items:
            $ref: '#/definitions/BoxItem'
        FontSettings:
          description: Configure FontSettings for this combobox.
          $ref: '#/definitions/FontSettingsAdvanced'
        Id:
          type: string
          description: Identifier for the form.
        PositionPage:
          type: integer
          format: int32
          description: Page number for the form.
          default: 1
        DocRefNumber:
          type: integer
          format: int32
          description: Document number for the form.
        Position:
          description: Exact position of the form.
          $ref: '#/definitions/Position'
        Size:
          description: Width and Height of the object.
          $ref: '#/definitions/Size'
        IsHidden:
          type: boolean
          description: Define if it is hidden.
          default: false
        ExportValue:
          type: string
          description: The export value of the form field.
        Description:
          type: string
          description: Description to provide details about the element.
        KeepExistingValue:
          type: boolean
          description: If true, form value from Pdf is used.
        CustomOrder:
          type: integer
          format: int32
          description: Increasing order number. Can be used for tabbing through the form elements.
          readOnly: true
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: ComboBox form.
  BoxItem:
    type: object
    properties:
      Key:
        type: string
        description: Key of the item.
      Value:
        type: string
        description: Value of the item.
      IsSelected:
        type: boolean
        description: Defines if the item is selected.
    xml:
      name: BoxItem
    description: Item in a form list.
  FontSettingsAdvanced:
    type: object
    properties:
      FontFamily:
        type: string
        description: Defines the font-family.
      TextAlign:
        type: string
        description: Alignment of the text.
        enum:
        - Left
        - Right
        - Center
        x-ms-enum:
          name: Align
          modelAsString: false
      TextColor:
        description: Choose the color for the text.
        $ref: '#/definitions/TextColor'
      Name:
        type: string
        description: Naming of the font.
      Size:
        type: number
        format: double
        description: Define the size.
      IsBold:
        type: boolean
        description: Define if the font-style should be bold.
      IsItalic:
        type: boolean
        description: Define if the font-style should be italic.
    xml:
      name: FontSettingsAdvanced
    description: Configure fontsettings for some formfields.
  ListBox:
    xml:
      name: ListBox
    allOf:
    - $ref: '#/definitions/Form'
    - type: object
      properties:
        Items:
          type: array
          xml:
            name: BoxItem
            wrapped: true
          description: Collection of items in the listbox.
          items:
            $ref: '#/definitions/BoxItem'
        FontSettings:
          description: Configure FontSettings for this listbox.
          $ref: '#/definitions/FontSettingsAdvanced'
        Id:
          type: string
          description: Identifier for the form.
        PositionPage:
          type: integer
          format: int32
          description: Page number for the form.
          default: 1
        DocRefNumber:
          type: integer
          format: int32
          description: Document number for the form.
        Position:
          description: Exact position of the form.
          $ref: '#/definitions/Position'
        Size:
          description: Width and Height of the object.
          $ref: '#/definitions/Size'
        IsHidden:
          type: boolean
          description: Define if it is hidden.
          default: false
        ExportValue:
          type: string
          description: The export value of the form field.
        Description:
          type: string
          description: Description to provide details about the element.
        KeepExistingValue:
          type: boolean
          description: If true, form value from Pdf is used.
        CustomOrder:
          type: integer
          format: int32
          description: Increasing order number. Can be used for tabbing through the form elements.
          readOnly: true
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: ListBox form.
  RadioButton:
    xml:
      name: RadioButton
    allOf:
    - $ref: '#/definitions/Form'
    - type: object
      properties:
        Value:
          type: string
          description: Value of the radiobutton.
        RadioButtonGroupId:
          type: string
          description: Configure if the radiobutton group identifier.
        Id:
          type: string
          description: Identifier for the form.
        PositionPage:
          type: integer
          format: int32
          description: Page number for the form.
          default: 1
        DocRefNumber:
          type: integer
          format: int32
          description: Document number for the form.
        Position:
          description: Exact position of the form.
          $ref: '#/definitions/Position'
        Size:
          description: Width and Height of the object.
          $ref: '#/definitions/Size'
        IsHidden:
          type: boolean
          description: Define if it is hidden.
          default: false
        ExportValue:
          type: string
          description: The export value of the form field.
        Description:
          type: string
          description: Description to provide details about the element.
        KeepExistingValue:
          type: boolean
          description: If true, form value from Pdf is used.
        CustomOrder:
          type: integer
          format: int32
          description: Increasing order number. Can be used for tabbing through the form elements.
          readOnly: true
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: RadioButton form.
  TextBox:
    xml:
      name: TextBox
    allOf:
    - $ref: '#/definitions/Form'
    - type: object
      properties:
        IsScrollAllowed:
          type: boolean
          description: Define if scrolling is allowed.
          default: false
        IsComb:
          type: boolean
          description: Define if the field is automatically divided into as many equally spaced positions, or combs, as the value of 'MaxLength', and the text is laid out into those combs.
          default: false
        Value:
          type: string
          description: Value of the textbox.
        MaxLength:
          type: integer
          format: int32
          description: The maximum of characters in the textBox. -1 means it is not limited.
          default: 0
        IsMultiLine:
          type: boolean
          description: Define if the textbox is multiline.
          default: false
        IsPassword:
          type: boolean
          description: Define if the textbox is a password.
          default: false
        IsFileSelect:
          type: boolean
          description: Define if it is a file selection.
          default: false
        FontSettings:
          description: Configure FontSettings for this textbox.
          $ref: '#/definitions/FontSettingsAdvanced'
        FormFieldValidation:
          description: Configure FormFieldValidation for this textbox.
          $ref: '#/definitions/FormFieldValidation'
        Id:
          type: string
          description: Identifier for the form.
        PositionPage:
          type: integer
          format: int32
          description: Page number for the form.
          default: 1
        DocRefNumber:
          type: integer
          format: int32
          description: Document number for the form.
        Position:
          description: Exact position of the form.
          $ref: '#/definitions/Position'
        Size:
          description: Width and Height of the object.
          $ref: '#/definitions/Size'
        IsHidden:
          type: boolean
          description: Define if it is hidden.
          default: false
        ExportValue:
          type: string
          description: The export value of the form field.
        Description:
          type: string
          description: Description to provide details about the element.
        KeepExistingValue:
          type: boolean
          description: If true, form value from Pdf is used.
        CustomOrder:
          type: integer
          format: int32
          description: Increasing order number. Can be used for tabbing through the form elements.
          readOnly: true
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: TextBox form.
  FormFieldValidation:
    type: object
    required:
    - DiscriminatorType
    discriminator: DiscriminatorType
    properties:
      DiscriminatorType:
        type: string
        description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    xml:
      name: FormFieldValidation
    description: "Abstract class, use the derived classes:\r\n- FormFieldValidationDate\r\n- FormFieldValidationEmail\r\n- FormFieldValidationNumber\r\n- FormFieldValidationPhone\r\n- FormFieldValidationTime\r\n            \r\nFor usage see sample code.\r\n\r\nBase class for"
  SigTypeAutomaticSignature:
    xml:
      name: SigTypeAutomaticSignature
    allOf:
    - $ref: '#/definitions/SigType'
    - type: object
      properties:
        TrModType:
          type: string
          description: Transaction code modul type.
        SealingProfileId:
          type: string
        RenderingLanguage:
          type: string
          description: ISO language code
        Id:
          type: string
          description: Define a identifier.
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
        Preferred:
          type: boolean
          description: Define if this SigType is the preferred one.
    description: Automatic signature SigType.
  SigTypeBiometricSignature:
    xml:
      name: SigTypeBiometricSignature
    allOf:
    - $ref: '#/definitions/SigType'
    - type: object
      properties:
        IsBio:
          type: boolean
          description: Define if the BiometricSignature has a BioServerVerification.
          default: false
        Uid:
          type: string
          description: Uid for verification.
        AllowSkipBiometricVerification:
          type: boolean
          description: Allow skipping biometric verification.
          default: false
        AllowBiometricStoringOnly:
          type: boolean
          description: Allow biometric storing only.
          default: false
        SignedResponseWithoutBioData:
          type: boolean
          description: Signed response without bio data.
          default: false
        Id:
          type: string
          description: Define a identifier.
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
        Preferred:
          type: boolean
          description: Define if this SigType is the preferred one.
    description: Define a BiometricSignature.
  SigTypeBiometricSignatureAndLocalCertificate:
    xml:
      name: SigTypeBiometricSignatureAndLocalCertificate
    allOf:
    - $ref: '#/definitions/SigType'
    - type: object
      properties:
        Ly:
          type: string
          description: Define the layout of the local certificate.
          default: ""
        IsBio:
          type: boolean
          description: Define if the BiometricSignature has a BioServerVerification.
          default: false
        Id:
          type: string
          description: Define a identifier.
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
        Preferred:
          type: boolean
          description: Define if this SigType is the preferred one.
    description: BiometricSignatureAndLocalCertificate SigType.
  SigTypeExternalSigningProcess:
    xml:
      name: SigTypeExternalSigningProcess
    allOf:
    - $ref: '#/definitions/SigType'
    - type: object
      properties:
        TrConfId:
          type: string
          description: Reference to transcation code configuration id for signing.
        Id:
          type: string
          description: Define a identifier.
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
        Preferred:
          type: boolean
          description: Define if this SigType is the preferred one.
  SigTypeLocalCertificate:
    xml:
      name: SigTypeLocalCertificate
    allOf:
    - $ref: '#/definitions/SigType'
    - type: object
      properties:
        Ly:
          type: string
          description: Define the layout of the local certificate.
          default: ""
        Id:
          type: string
          description: Define a identifier.
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
        Preferred:
          type: boolean
          description: Define if this SigType is the preferred one.
    description: LocalCertificate SigType.
  SigTypePicture:
    xml:
      name: SigTypePicture
    properties:
      DiscriminatorType:
        type: string
    required:
    - DiscriminatorType
    allOf:
    - $ref: '#/definitions/SigType'
    - type: object
      properties:
        AllowedCapturingMethod:
          type: string
          description: List of allowed capturing methods.
          readOnly: true
          enum:
          - Click2Sign
          - Draw2Sign
          - Type2Sign
          x-ms-enum:
            name: SigTypePictureAllowedCapturingMethods
            modelAsString: false
        StampImprintConfiguration:
          description: Confiugre StampImprintConfiguration.
          $ref: '#/definitions/StampImprintConfiguration'
        Id:
          type: string
          description: Define a identifier.
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
        Preferred:
          type: boolean
          description: Define if this SigType is the preferred one.
    description: Picture SigType.
  StampImprintConfiguration:
    type: object
    properties:
      DisplayExtraInformation:
        type: boolean
        description: Define if extra information should be displayed.
      DisplayEmail:
        type: boolean
        description: Define if email should be displayed.
      DisplayIp:
        type: boolean
        description: Define if ip should be displayed.
      DisplayName:
        type: boolean
        description: Define if name should be displayed.
      DisplaySignatureDate:
        type: boolean
        description: Define if signature date should be displayed.
      FontFamily:
        type: string
        description: Define a font-family.
      FontSize:
        type: number
        format: double
        description: Define a font-size.
    xml:
      name: StampImprintConfiguration
    description: Configured StampImprintConfiguration.
  SigTypeTransactionCode:
    xml:
      name: SigTypeTransactionCode
    allOf:
    - $ref: '#/definitions/SigType'
    - type: object
      properties:
        TrModType:
          type: string
          description: Transaction code modul type.
        TrValidityInSeconds:
          type: integer
          format: int32
          description: Validation of transaction in seconds.
          default: 300
        Ly:
          type: string
          description: Layout of the transaction code.
          default: ""
        TrConfIdIssueCertificate:
          type: string
          description: Reference to transaction code configuration for issuing the certificate and signing.
        TrConfId:
          type: string
          description: Reference to transcation code configuration id for signing.
        IsPhoneNumberRequired:
          type: boolean
          description: Define if the phone number should be required.
          readOnly: true
        Id:
          type: string
          description: Define a identifier.
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
        Preferred:
          type: boolean
          description: Define if this SigType is the preferred one.
    description: TransactionCode SigType.
  SigTypeTransactionCodeAndBiometricSignature:
    xml:
      name: SigTypeTransactionCodeAndBiometricSignature
    allOf:
    - $ref: '#/definitions/SigType'
    - type: object
      properties:
        IsBio:
          type: boolean
          description: Define if the BiometricSignature has a BioServerVerification.
          default: false
        TrModType:
          type: string
          description: Transaction code modul type.
        TrValidityInSeconds:
          type: integer
          format: int32
          description: Validation of transaction in seconds.
          default: 300
        Ly:
          type: string
          description: Layout of the transaction code.
          default: ""
        TrConfIdIssueCertificate:
          type: string
          description: Reference to transaction code configuration for issuing the certificate and signing.
        TrConfId:
          type: string
          description: Reference to transcation code configuration id for signing.
        IsPhoneNumberRequired:
          type: boolean
          description: Define if the phonenumber should be required.
          readOnly: true
        Id:
          type: string
          description: Define a identifier.
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
        Preferred:
          type: boolean
          description: Define if this SigType is the preferred one.
    description: TransactionCodeAndBiometricSignature SigType.
  SigTypeTransactionCodeAndLocalCertificate:
    xml:
      name: SigTypeTransactionCodeAndLocalCertificate
    allOf:
    - $ref: '#/definitions/SigType'
    - type: object
      properties:
        TrModType:
          type: string
          description: Transaction code modul type.
        TrValidityInSeconds:
          type: integer
          format: int32
          description: Validation of transaction in seconds.
          default: 300
        Ly:
          type: string
          description: Layout of the transaction code.
          default: ""
        TrConfIdIssueCertificate:
          type: string
          description: Reference to transaction code configuration for issuing the certificate and signing.
        TrConfId:
          type: string
          description: Reference to transcation code configuration id for signing.
        IsPhoneNumberRequired:
          type: boolean
          description: Define if the phonenumber should be required.
        Id:
          type: string
          description: Define a identifier.
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
        Preferred:
          type: boolean
          description: Define if this SigType is the preferred one.
    description: TransactionCodeAndLocalCertificate SigType.
  SigTypeTransactionCodeBiometricSignatureAndLocalCertificate:
    xml:
      name: SigTypeTransactionCodeBiometricSignatureAndLocalCertificate
    allOf:
    - $ref: '#/definitions/SigType'
    - type: object
      properties:
        IsBio:
          type: boolean
          description: Define if the BiometricSignature has a BioServerVerification.
          default: false
        TrModType:
          type: string
          description: Transaction code modul type.
        TrValidityInSeconds:
          type: integer
          format: int32
          description: Validation of transaction in seconds.
          default: 300
        Ly:
          type: string
          description: Layout of the transaction code.
          default: ""
        TrConfIdIssueCertificate:
          type: string
          description: Reference to transaction code configuration for issuing the certificate and signing.
        TrConfId:
          type: string
          description: Reference to transcation code configuration id for signing.
        IsPhoneNumberRequired:
          type: boolean
          description: Define if the phonenumber should be required.
        Id:
          type: string
          description: Define a identifier.
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
        Preferred:
          type: boolean
          description: Define if this SigType is the preferred one.
  SigTypeClick2Sign:
    xml:
      name: SigTypeClick2Sign
    allOf:
    - $ref: '#/definitions/SigTypePicture'
    - type: object
  SigTypeDraw2Sign:
    xml:
      name: SigTypeDraw2Sign
    allOf:
    - $ref: '#/definitions/SigTypePicture'
    - type: object
  SigTypeType2Sign:
    xml:
      name: SigTypeType2Sign
    allOf:
    - $ref: '#/definitions/SigTypePicture'
    - type: object
  AuthenticationMethodCertificate:
    xml:
      name: AuthenticationMethodCertificate
    allOf:
    - $ref: '#/definitions/AuthenticationMethod'
    - type: object
      properties:
        CertificateFilter:
          description: Certificate filter for authentication.
          $ref: '#/definitions/CertificateFilter'
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: Authentication via certificate.
  AuthenticationMethodFacebook:
    xml:
      name: AuthenticationMethodFacebook
    allOf:
    - $ref: '#/definitions/AuthenticationMethod'
    - type: object
      properties:
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: Authentication with Facebook.
  AuthenticationMethodGenericOAuthClient:
    xml:
      name: AuthenticationMethodGenericOAuthClient
    allOf:
    - $ref: '#/definitions/AuthenticationMethod'
    - type: object
      properties:
        Scope:
          type: string
          description: Scope of the authentication.
        ProviderIdentifier:
          type: string
          description: Provider identifier.
        ResourceUris:
          type: array
          xml:
            name: AuthenticationMethodResourceUri
            wrapped: true
          description: Resource uris of the authentication.
          items:
            $ref: '#/definitions/AuthenticationMethodResourceUri'
        Checks:
          type: array
          xml:
            name: AuthenticationMethodCheck
            wrapped: true
          description: Checks for the authentication.
          items:
            $ref: '#/definitions/AuthenticationMethodCheck'
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: Authentication with generic OAuthentication.
  AuthenticationMethodResourceUri:
    type: object
    properties:
      Uri:
        type: string
        description: Uri for the resource.
      AccessTokenParamName:
        type: string
        description: AccessTokenParamName for the uri.
      Field:
        type: string
        description: Field of the resource uri.
      FieldId:
        type: string
        description: Id for the field.
    xml:
      name: AuthenticationMethodResourceUri
    description: ResourceUri for GenericOAuthClient
  AuthenticationMethodCheck:
    type: object
    properties:
      FieldId:
        type: string
        description: Field id
      CompareOperation:
        type: string
        description: Compare operator.
        enum:
        - Equal
        - NotEqual
        x-ms-enum:
          name: CompareOperations
          modelAsString: false
      Value:
        type: string
        description: Value of the check.
    xml:
      name: AuthenticationMethodCheck
    description: Checks for OAuth and Saml
  AuthenticationMethodGenericSamlClient:
    xml:
      name: AuthenticationMethodGenericSamlClient
    allOf:
    - $ref: '#/definitions/AuthenticationMethod'
    - type: object
      properties:
        ProviderIdentifier:
          type: string
          description: Provider identifier.
        Checks:
          type: array
          xml:
            name: AuthenticationMethodCheck
            wrapped: true
          description: Checks for the authentication.
          items:
            $ref: '#/definitions/AuthenticationMethodCheck'
        Fields:
          type: array
          xml:
            name: KeyValuePair
            wrapped: true
          description: Fields for the authentication.
          items:
            $ref: '#/definitions/KeyValuePair'
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: Authentication with generic Saml.
  AuthenticationMethodGoogle:
    xml:
      name: AuthenticationMethodGoogle
    allOf:
    - $ref: '#/definitions/AuthenticationMethod'
    - type: object
      properties:
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: Authentication with Google.
  AuthenticationMethodIdentityServer:
    xml:
      name: AuthenticationMethodIdentityServer
    allOf:
    - $ref: '#/definitions/AuthenticationMethod'
    - type: object
      properties:
        IdentityId:
          type: string
          description: Defines the id of the identity.
        ModuleId:
          type: string
          description: Defines the id of the module.
        TrConfId:
          type: string
          description: Defines the id of the trConfiguration
        NeedsToPrepare:
          type: boolean
          description: Defines if preparation is needed.
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: Uses the identity server as authentication method.
  AuthenticationMethodNamirialRemoteSignature:
    xml:
      name: AuthenticationMethodNamirialRemoteSignature
    allOf:
    - $ref: '#/definitions/AuthenticationMethod'
    - type: object
      properties:
        DeviceId:
          type: string
          description: Device identifier.
        UserId:
          type: string
          description: User identifier.
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: Authentication with NamirialRemoteSignature.
  AuthenticationMethodBankId:
    xml:
      name: AuthenticationMethodBankId
    allOf:
    - $ref: '#/definitions/AuthenticationMethod'
    - type: object
      properties:
        PersonalNumber:
          type: string
          description: PersonalNumber to authenticate.
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: Uses a pin as authentication method.
  AuthenticationMethodPin:
    xml:
      name: AuthenticationMethodPin
    allOf:
    - $ref: '#/definitions/AuthenticationMethod'
    - type: object
      properties:
        Pin:
          type: string
          description: Pin to authenticate.
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: Uses a pin as authentication method.
  AuthenticationMethodSms:
    xml:
      name: AuthenticationMethodSms
    allOf:
    - $ref: '#/definitions/AuthenticationMethod'
    - type: object
      properties:
        Code:
          type: string
          description: Code for the authentication.
          readOnly: true
        CodeGenerationTime:
          type: string
          description: Time the code is generated.
          readOnly: true
        Phonenumber:
          type: string
          description: Phonenumber for authentication.
        TransactionId:
          type: string
          description: Defines the id of the transaction.
          readOnly: true
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: Uses sms authentication as authentication method.
  AuthenticationMethodUserId:
    xml:
      name: AuthenticationMethodUserId
    allOf:
    - $ref: '#/definitions/AuthenticationMethod'
    - type: object
      properties:
        UserIds:
          type: array
          description: The list of userids that are allowed to access the document.
          items:
            type: string
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: Uses  UserIds as authentication method.
  AuthenticationMethodWindowsLive:
    xml:
      name: AuthenticationMethodWindowsLive
    allOf:
    - $ref: '#/definitions/AuthenticationMethod'
    - type: object
      properties:
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: Uses WindowsLive as authentication method.
  FormFieldValidationDate:
    xml:
      name: FormFieldValidationDate
    allOf:
    - $ref: '#/definitions/FormFieldValidation'
    - type: object
      properties:
        Format:
          type: string
          description: Defines the format of the format. (e.g. "dd. MMMM yyyy")
        Range:
          description: Define the range of the date. Has to be in the specified format. Optional.
          $ref: '#/definitions/FormFieldValidationRange'
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: FormFieldValidation for dates.
  FormFieldValidationRange:
    type: object
    properties:
      From:
        type: string
        description: Defines a value for the start of the range.
      To:
        type: string
        description: Defines a value for the end of the range.
    xml:
      name: FormFieldValidationRange
    description: Range to define in
  FormFieldValidationEmail:
    xml:
      name: FormFieldValidationEmail
    allOf:
    - $ref: '#/definitions/FormFieldValidation'
    - type: object
      properties:
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: FormFieldValidation for emails.
  FormFieldValidationNumber:
    xml:
      name: FormFieldValidationNumber
    allOf:
    - $ref: '#/definitions/FormFieldValidation'
    - type: object
      properties:
        DecimalPlaces:
          type: integer
          format: int32
          description: Defines the allowed decimal places.
        DecimalSeparator:
          type: string
          description: Defines the decimal separator. Must be different to ThousandsSeparator. Required if DecimalPlaces is greater than 0.
          enum:
          - Comma
          - Point
          - Apostrophe
          x-ms-enum:
            name: FormFieldValidationDecimalSeparatorType
            modelAsString: false
        ThousandsSeparator:
          type: string
          description: Defines the thousands separator. Must be different to DecimalSeparator.
          enum:
          - Comma
          - Point
          - Apostrophe
          - Blank
          x-ms-enum:
            name: FormFieldValidationThousandsSeparatorType
            modelAsString: false
        Symbol:
          type: string
          description: Defines the symbol for this number. E.g. currency.
        SymbolLocation:
          type: string
          description: Defines the location of this symbol. Required if Symbol is set.
          enum:
          - Start
          - StartWithBlank
          - End
          - EndWithBlank
          x-ms-enum:
            name: FormFieldValidationSymbolLocationType
            modelAsString: false
        Range:
          $ref: '#/definitions/FormFieldValidationRange'
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: FormFieldValidation for numbers.
  FormFieldValidationPhone:
    xml:
      name: FormFieldValidationPhone
    allOf:
    - $ref: '#/definitions/FormFieldValidation'
    - type: object
      properties:
        PhoneType:
          type: string
          description: Defines the PhoneType.
          enum:
          - International
          - InternationalLeadingZeros
          - InternationalLeadingPlus
          x-ms-enum:
            name: FormFieldValidationPhoneType
            modelAsString: false
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: FormFieldValidation for phones.
  FormFieldValidationTime:
    xml:
      name: FormFieldValidationTime
    allOf:
    - $ref: '#/definitions/FormFieldValidation'
    - type: object
      properties:
        Format:
          type: string
          description: Defines the format of this time. (e.g. "HH:mm")
        Range:
          description: Defines a allowed range for this time. Must match the specified format. Optional.
          $ref: '#/definitions/FormFieldValidationRange'
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
    description: FormFieldValidation for times.
  AutomaticSignature:
    xml:
      name: AutomaticSignature
    allOf:
    - $ref: '#/definitions/FinalizeAction'
    - type: object
      properties:
        SigId:
          type: string
          description: Signature Id from automatic signature.
        DiscriminatorType:
          type: string
          description: DiscriminatorType.
    description: Finalizeaction configuration for automatic signature
  Timemark:
    xml:
      name: Timemark
    allOf:
    - $ref: '#/definitions/FinalizeAction'
    - type: object
      properties:
        DocRefNumbers:
          type: string
          description: Document number for this timemark.
          default: '*'
        SpcId:
          type: string
          description: SignaturePluginConfiguration Id for this timemark.
          default: ""
        DiscriminatorType:
          type: string
          description: DiscriminatorType.
    description: Timemark (the original 'timestamp' couldn't be used due to generation error) for FinalizeActions. The timemakr allows you to add an invisible signature using a trusted timestamp service to the configured documents when finishing the workstep.
  FillCheckBoxFormDescriptor:
    xml:
      name: FillCheckBoxFormDescriptor
    allOf:
    - $ref: '#/definitions/FillFormDescriptor'
    - type: object
      properties:
        IsChecked:
          type: boolean
          description: Specifies if the checkbox should be checked.
          default: false
        Name:
          type: string
          description: "Abstract class, use the derived classes:\r\n- FillCheckBoxFormDescriptor\r\n- FillComboBoxFormDescriptor\r\n- FillListBoxFormDescriptor\r\n- FillRadioButtonFormDescriptor\r\n- FillTextBoxFormDescriptor\r\n            \r\nFor usage see sample code.\r\n\r\nThe name of the form field."
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
  FillComboBoxFormDescriptor:
    xml:
      name: FillComboBoxFormDescriptor
    allOf:
    - $ref: '#/definitions/FillFormDescriptor'
    - type: object
      properties:
        Value:
          type: string
          description: The selected value of the combobox.
          default: ""
        Name:
          type: string
          description: "Abstract class, use the derived classes:\r\n- FillCheckBoxFormDescriptor\r\n- FillComboBoxFormDescriptor\r\n- FillListBoxFormDescriptor\r\n- FillRadioButtonFormDescriptor\r\n- FillTextBoxFormDescriptor\r\n            \r\nFor usage see sample code.\r\n\r\nThe name of the form field."
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
  FillListBoxFormDescriptor:
    xml:
      name: FillListBoxFormDescriptor
    allOf:
    - $ref: '#/definitions/FillFormDescriptor'
    - type: object
      properties:
        SelectedItems:
          type: array
          description: The items which are selected in the listbox. Has to hold at least one value.
          items:
            type: string
        Name:
          type: string
          description: "Abstract class, use the derived classes:\r\n- FillCheckBoxFormDescriptor\r\n- FillComboBoxFormDescriptor\r\n- FillListBoxFormDescriptor\r\n- FillRadioButtonFormDescriptor\r\n- FillTextBoxFormDescriptor\r\n            \r\nFor usage see sample code.\r\n\r\nThe name of the form field."
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
  FillRadioButtonFormDescriptor:
    xml:
      name: FillRadioButtonFormDescriptor
    allOf:
    - $ref: '#/definitions/FillFormDescriptor'
    - type: object
      properties:
        SelectedItem:
          type: string
          description: The selected Item in an radiobutton group.
        Name:
          type: string
          description: "Abstract class, use the derived classes:\r\n- FillCheckBoxFormDescriptor\r\n- FillComboBoxFormDescriptor\r\n- FillListBoxFormDescriptor\r\n- FillRadioButtonFormDescriptor\r\n- FillTextBoxFormDescriptor\r\n            \r\nFor usage see sample code.\r\n\r\nThe name of the form field."
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
  FillTextBoxFormDescriptor:
    xml:
      name: FillTextBoxFormDescriptor
    allOf:
    - $ref: '#/definitions/FillFormDescriptor'
    - type: object
      properties:
        Value:
          type: string
          description: The value of the TextBox.
          default: ""
        Name:
          type: string
          description: "Abstract class, use the derived classes:\r\n- FillCheckBoxFormDescriptor\r\n- FillComboBoxFormDescriptor\r\n- FillListBoxFormDescriptor\r\n- FillRadioButtonFormDescriptor\r\n- FillTextBoxFormDescriptor\r\n            \r\nFor usage see sample code.\r\n\r\nThe name of the form field."
        DiscriminatorType:
          type: string
          description: Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.
  AddCheckBoxFormFieldDescriptor:
    xml:
      name: AddCheckBoxFormFieldDescriptor
    allOf:
    - $ref: '#/definitions/AddFormFieldDescriptor'
    - type: object
      properties:
        IsChecked:
          type: boolean
          description: Boolean indicating if the checkbox should be checked initially.
          default: false
        ExportValue:
          type: string
          description: The textual description of the checkbox.
          default: ""
        Name:
          type: string
          description: The name of the form field.
        ReadOnly:
          type: boolean
          description: Specifies if the form field is readonly.
          default: false
        Required:
          type: boolean
          description: Specifies if the form field is required.
          default: false
        X:
          type: number
          format: double
          description: The X coordinate in points.
        Y:
          type: number
          format: double
          description: The Y coordinate in points.
        Width:
          type: number
          format: double
          description: The width of the form field in points.
        Height:
          type: number
          format: double
          description: The height of the form field in points.
        Page:
          type: integer
          format: int32
          description: The page number of the form field. (Starting with 1)
        DiscriminatorType:
          type: string
          description: To differentiate between childs.
  AddComboBoxFormFieldDescriptor:
    xml:
      name: AddComboBoxFormFieldDescriptor
    allOf:
    - $ref: '#/definitions/AddFormFieldChoiceItemsDescriptor'
    - type: object
  AddFormFieldChoiceItemDescriptor:
    type: object
    properties:
      ExportValue:
        type: string
        description: The technical textual description.
      DisplayValue:
        type: string
        description: The visual textual description.
      IsSelected:
        type: boolean
        description: Boolean indicating if the item is selected by default.
        default: false
    xml:
      name: AddFormFieldChoiceItemDescriptor
  AddFormFieldChoiceItemsDescriptor:
    xml:
      name: AddFormFieldChoiceItemsDescriptor
    properties:
      DiscriminatorType:
        type: string
    required:
    - DiscriminatorType
    allOf:
    - $ref: '#/definitions/AddFormFieldDescriptor'
    - type: object
      properties:
        Items:
          type: array
          xml:
            name: AddFormFieldChoiceItemDescriptor
            wrapped: true
          description: A list of choice items.
          items:
            $ref: '#/definitions/AddFormFieldChoiceItemDescriptor'
        TextColor:
          type: string
          description: Font color. Default is black.
          default: Red
        FontSize:
          type: number
          format: double
          description: Font size.
        FontName:
          type: string
          description: Font name.
        Bold:
          type: boolean
          description: Flag if font is bold. Default false;
          default: false
        Italic:
          type: boolean
          description: Flag if font is italic. Default is false.
          default: false
        TextAlign:
          type: string
          description: Text alignment. Default is left.
          default: "Left"
          enum:
          - Left
          - Center
          - Right
          x-ms-enum:
            name: TextAlign
            modelAsString: false
        Name:
          type: string
          description: The name of the form field.
        ReadOnly:
          type: boolean
          description: Specifies if the form field is readonly.
          default: false
        Required:
          type: boolean
          description: Specifies if the form field is required.
          default: false
        X:
          type: number
          format: double
          description: The X coordinate in points.
        Y:
          type: number
          format: double
          description: The Y coordinate in points.
        Width:
          type: number
          format: double
          description: The width of the form field in points.
        Height:
          type: number
          format: double
          description: The height of the form field in points.
        Page:
          type: integer
          format: int32
          description: The page number of the form field. (Starting with 1)
        DiscriminatorType:
          type: string
          description: To differentiate between childs.
  AddFormFieldWithFontSettingsDescriptor:
    xml:
      name: AddFormFieldWithFontSettingsDescriptor
    properties:
      DiscriminatorType:
        type: string
    required:
    - DiscriminatorType
    allOf:
    - $ref: '#/definitions/AddFormFieldDescriptor'
    - type: object
      properties:
        TextColor:
          type: string
          description: Font color. Default is black.
          default: Red
        FontSize:
          type: number
          format: double
          description: Font size.
        FontName:
          type: string
          description: Font name.
        Bold:
          type: boolean
          description: Flag if font is bold. Default false;
          default: false
        Italic:
          type: boolean
          description: Flag if font is italic. Default is false.
          default: false
        TextAlign:
          type: string
          description: Text alignment. Default is left.
          default: "Left"
          enum:
          - Left
          - Center
          - Right
          x-ms-enum:
            name: TextAlign
            modelAsString: false
        Name:
          type: string
          description: The name of the form field.
        ReadOnly:
          type: boolean
          description: Specifies if the form field is readonly.
          default: false
        Required:
          type: boolean
          description: Specifies if the form field is required.
          default: false
        X:
          type: number
          format: double
          description: The X coordinate in points.
        Y:
          type: number
          format: double
          description: The Y coordinate in points.
        Width:
          type: number
          format: double
          description: The width of the form field in points.
        Height:
          type: number
          format: double
          description: The height of the form field in points.
        Page:
          type: integer
          format: int32
          description: The page number of the form field. (Starting with 1)
        DiscriminatorType:
          type: string
          description: To differentiate between childs.
  AddListBoxFormFieldDescriptor:
    xml:
      name: AddListBoxFormFieldDescriptor
    allOf:
    - $ref: '#/definitions/AddFormFieldChoiceItemsDescriptor'
    - type: object
  AddRadioButtonFormFieldDescriptor:
    xml:
      name: AddRadioButtonFormFieldDescriptor
    allOf:
    - $ref: '#/definitions/AddFormFieldDescriptor'
    - type: object
      properties:
        ExportValue:
          type: string
          description: The technical textual description of the radio button.
          default: ""
        IsChecked:
          type: boolean
          description: Boolean indicating wether the radio button is checked by default.
          default: false
        IsSelectUnison:
          type: boolean
          description: Boolean indicating if radio buttons with the same <code>ExportValue</code> are checked and unchecked together.
          default: false
        Name:
          type: string
          description: The name of the form field.
        ReadOnly:
          type: boolean
          description: Specifies if the form field is readonly.
          default: false
        Required:
          type: boolean
          description: Specifies if the form field is required.
          default: false
        X:
          type: number
          format: double
          description: The X coordinate in points.
        Y:
          type: number
          format: double
          description: The Y coordinate in points.
        Width:
          type: number
          format: double
          description: The width of the form field in points.
        Height:
          type: number
          format: double
          description: The height of the form field in points.
        Page:
          type: integer
          format: int32
          description: The page number of the form field. (Starting with 1)
        DiscriminatorType:
          type: string
          description: To differentiate between childs.
  AddTextBoxFormFieldDescriptor:
    xml:
      name: AddTextBoxFormFieldDescriptor
    allOf:
    - $ref: '#/definitions/AddFormFieldDescriptor'
    - type: object
      properties:
        Value:
          type: string
          description: The default text of the textbox.
          default: ""
        MaxLength:
          type: integer
          format: int32
          description: The maximum length of characters inside the textbox.
          default: -1
        IsMultiline:
          type: boolean
          description: Boolean indicating if the textbox can have multiple lines.
          default: false
        IsPassword:
          type: boolean
          description: Boolean indicating if the textbox behaves as password input.
          default: false
        IsFileSelect:
          type: boolean
          description: Boolean indicating if the textbox behaves as a file upload.
          default: false
        IsScrollAllowed:
          type: boolean
          description: Boolean indicating if scrolling is allowed inside the textbox.
          default: false
        IsComb:
          type: boolean
          description: Boolean indicating if TextBox is combined.
          default: false
        TextColor:
          type: string
          description: Font color. Default is black.
          default: Red
        FontSize:
          type: number
          format: double
          description: Font size.
        FontName:
          type: string
          description: Font name.
        Bold:
          type: boolean
          description: Flag if font is bold. Default false;
          default: false
        Italic:
          type: boolean
          description: Flag if font is italic. Default is false.
          default: false
        TextAlign:
          type: string
          description: Text alignment. Default is left.
          default: "Left"
          enum:
          - Left
          - Center
          - Right
          x-ms-enum:
            name: TextAlign
            modelAsString: false
        Name:
          type: string
          description: The name of the form field.
        ReadOnly:
          type: boolean
          description: Specifies if the form field is readonly.
          default: false
        Required:
          type: boolean
          description: Specifies if the form field is required.
          default: false
        X:
          type: number
          format: double
          description: The X coordinate in points.
        Y:
          type: number
          format: double
          description: The Y coordinate in points.
        Width:
          type: number
          format: double
          description: The width of the form field in points.
        Height:
          type: number
          format: double
          description: The height of the form field in points.
        Page:
          type: integer
          format: int32
          description: The page number of the form field. (Starting with 1)
        DiscriminatorType:
          type: string
          description: To differentiate between childs.
